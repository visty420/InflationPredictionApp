import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader, TensorDataset
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np

# Assuming 'df' is your loaded DataFrame with the consolidated data
# Load the data
df = pd.read_csv('./augmented_economic_data.csv')

# Define features and target
features = df[['CPIAUCSL', 'PPIACO', 'PCE', 'FEDFUNDS', 'UNRATE', 'GDP', 'M2SL', 'UMCSENT', 'Overall Wage Growth']].values
target = df['INFLRATE'].values

# Normalize the features
scaler = StandardScaler()
X_normalized = scaler.fit_transform(features)

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X_normalized, target, test_size=0.2, random_state=42)

best_params = {
    'lr': 0.000952163930520129,
    'num_layers': 3,
    'num_neurons': 98,
    'epochs': 663  
}

class InflationPredictor(nn.Module):
    def __init__(self, input_size, num_layers, num_neurons):
        super(InflationPredictor, self).__init__()
        layers = [nn.Linear(input_size, num_neurons), nn.ReLU()]
        for _ in range(1, num_layers):
            layers += [nn.Linear(num_neurons, num_neurons), nn.ReLU()]
        layers += [nn.Linear(num_neurons, 1)]
        self.network = nn.Sequential(*layers)
        
    def forward(self, x):
        return self.network(x)

# Function to create data loaders
def create_dataloader(X, y, batch_size=64):
    tensor_X = torch.tensor(X, dtype=torch.float32)
    tensor_y = torch.tensor(y, dtype=torch.float32).view(-1, 1)  # Adjust shape for regression
    dataset = TensorDataset(tensor_X, tensor_y)
    return DataLoader(dataset, batch_size=batch_size, shuffle=True)

# Create dataloaders
train_loader = create_dataloader(X_train, y_train)
test_loader = create_dataloader(X_test, y_test)

# Initialize the model, loss criterion, and optimizer
model = InflationPredictor(input_size=9, num_layers=best_params['num_layers'], num_neurons=best_params['num_neurons'])
optimizer = optim.Adam(model.parameters(), lr=best_params['lr'])
criterion = nn.MSELoss()


for epoch in range(best_params['epochs']):
    model.train()
    for batch_X, batch_y in train_loader:
        optimizer.zero_grad()
        predictions = model(batch_X)
        loss = criterion(predictions, batch_y)
        loss.backward()
        optimizer.step()
    print(f'Epoch {epoch+1}, Loss: {loss.item()}')

new_features = np.array([[29.11,31.7,318.2,4,5,524.2403333,294.1,95.05,3.918944099]])  
row2 = np.array(['29.01' '31.7' '306.1' '4' '6' '510.33' '286.6' '92.3'
 '3.918944099378882'])
row3 = np.array(['29' '31.7' '309.6' '4' '5.9' '514.437666666666' '287.7' '93.05'
 '3.918944099378882'])
row4 = np.array(['28.97' '31.7' '312.7' '4' '5.6' '518.545333333333' '289.2' '93.8'
 '3.918944099378882'])
row5 = np.array(['28.98' '31.8' '312.2' '4' '5.2' '522.653' '290.1' '94.55'
 '3.918944099378882'])
row6 = np.array(['29.04' '31.8' '316.1' '4' '5.1' '523.446666666666' '292.2' '95.3'
 '3.918944099378882'])
row7 = np.array(['29.11' '31.7' '318.2' '4' '5' '524.240333333333' '294.1' '95.05'
 '3.918944099378882'])
row8 = np.array(['29.15' '31.7' '317.8' '4' '5.1' '525.034' '295.2' '94.8'
 '3.918944099378882'])
row9 = np.array(['29.18' '31.6' '320.2' '4' '5.2' '526.222666666666' '296.4' '94.55'
 '3.918944099378882'])
row10 = np.array(['29.25' '31.7' '324.2' '4' '5.5' '527.411333333333' '296.7' '94.3'
 '3.918944099378882'])
row11 = np.array(['29.35' '31.6' '322.8' '4' '5.7' '528.6' '296.5' '94.05'
 '3.918944099378882'])
row12 = np.array(['29.35' '31.5' '322.9' '4' '5.8' '533.282666666666' '297.1' '93.8'
 '3.918944099378882'])
row13 = np.array(['29.41' '31.5' '322.9' '4' '5.3' '537.965333333333' '297.8'
 '95.8666666666666' '3.918944099378882'])
row14 = np.array(['29.37' '31.6' '323.6' '4' '5.2' '542.648' '298.2' '97.9333333333333'
 '3.918944099378882'])
row15 = np.array(['29.41' '31.6' '325.3' '4' '4.8' '542.125333333333' '298.4' '100'
 '3.918944099378882'])
row16 = np.array(['29.41' '31.8' '330.2' '4' '5.4' '541.602666666666' '299.3'
 '97.7666666666666' '3.918944099378882'])
row17 = np.array(['29.54' '31.8' '336.5' '4' '5.2' '541.08' '300.1' '95.5333333333333'
 '3.918944099378882'])
row18 = np.array(['29.57' '31.7' '330' '4' '5.1' '542.588' '300.9' '93.3'
 '3.918944099378882'])
row19 = np.array(['29.61' '31.7' '330.1' '4' '5.4' '544.096' '302.3' '94.6'
 '3.918944099378882'])
row20 = np.array(['29.55' '31.7' '331.4' '4' '5.5' '545.604' '304.1' '95.9'
 '3.918944099378882'])
row21 = np.array(['29.61' '31.6' '331.6' '4' '5.6' '543.801666666666' '306.9' '97.2'
 '3.918944099378882'])
row22 = np.array(['29.61' '31.6' '333.4' '4' '5.5' '541.999333333333' '308.4'
 '94.8333333333333' '3.918944099378882'])
row23 = np.array(['29.75' '31.7' '335.4' '4' '6.1' '540.197' '309.5' '92.4666666666666'
 '3.918944099378882'])
row24 = np.array(['29.78' '31.7' '335.4' '4' '6.1' '541.804' '310.9' '90.1'
 '3.918944099378882'])
row25 = np.array(['29.81' '31.7' '331.3' '4' '6.6' '543.411' '312.4' '90.6'
 '3.918944099378882'])
row26 = np.array(['29.84' '31.8' '332.2' '4' '6.6' '545.018' '314.1' '91.1'
 '3.918944099378882'])
row27 = np.array(['29.84' '31.8' '333.7' '4' '6.9' '548.527' '316.5' '91.6'
 '3.918944099378882'])
row28 = np.array(['29.84' '31.8' '337.7' '4' '6.9' '552.036' '318.3' '91.8999999999999'
 '3.918944099378882'])
row29 = np.array(['29.81' '31.6' '337.6' '4' '7' '555.545' '319.9' '92.2'
 '3.918944099378882'])
row30 = np.array(['29.84' '31.5' '339.9' '4' '7.1' '559.584666666666' '322.2' '92.5'
 '3.918944099378882'])
row31 = np.array(['29.84' '31.3' '340.9' '4' '6.9' '563.624333333333' '324.3'
 '94.7333333333333' '3.918944099378882'])
row32 = np.array(['29.92' '31.5' '340.6' '4' '7' '567.664' '325.6' '96.9666666666666'
 '3.918944099378882'])
row33 = np.array(['29.94' '31.5' '342.1' '4' '6.6' '571.98' '327.6' '99.2'
 '3.918944099378882'])
row34 = np.array(['29.98' '31.5' '344.4' '4' '6.7' '576.295999999999' '329.5'
 '97.1333333333333' '3.918944099378882'])
row35 = np.array(['29.98' '31.5' '346.5' '4' '6.5' '580.612' '331.1' '95.0666666666666'
 '3.918944099378882'])
row36 = np.array(['29.98' '31.5' '349.9' '4' '6.1' '585.079' '333.4' '93'
 '3.918944099378882'])
row37 = np.array(['30.01' '31.6' '352.4' '4' '6' '589.546' '335.5' '95.3'
 '3.918944099378882'])
row38 = np.array(['30.04' '31.7' '353.2' '4' '5.8' '594.013' '337.5' '97.6'
 '3.918944099378882'])
row39 = np.array(['30.11' '31.7' '354' '4' '5.5' '596.130666666666' '340.1' '99.9'
 '3.918944099378882'])
row40 = np.array(['30.17' '31.7' '357.4' '4' '5.6' '598.248333333333' '343.1' '98.4'
 '3.918944099378882'])
row41 = np.array(['30.21' '31.6' '359' '4' '5.6' '600.366' '345.5' '96.9'
 '3.918944099378882'])
row42 = np.array(['30.24' '31.5' '362' '4' '5.5' '603.253' '347.5' '95.4'
 '3.918944099378882'])
row43 = np.array(['30.21' '31.5' '360.4' '4' '5.5' '606.14' '349.3' '94.1333333333333'
 '3.918944099378882'])
row44 = np.array(['30.22' '31.6' '361.4' '4' '5.4' '609.027' '350.8' '92.8666666666666'
 '3.918944099378882'])
row45 = np.array(['30.28' '31.6' '362.9' '4' '5.7' '610.111333333333' '352.8' '91.6'
 '3.918944099378882'])
row46 = np.array(['30.42' '31.9' '368.8' '4' '5.6' '611.195666666666' '354.9'
 '92.7333333333333' '3.918944099378882'])
row47 = np.array(['30.38' '31.7' '366.5' '4' '5.4' '612.28' '357.2' '93.8666666666666'
 '3.918944099378882'])
row48 = np.array(['30.38' '31.7' '371.7' '4' '5.7' '615.410666666666' '359.8' '95'
 '3.918944099378882'])
row49 = np.array(['30.38' '31.6' '373.6' '4' '5.5' '618.541333333333' '362.7'
 '96.1333333333333' '3.918944099378882'])
row50 = np.array(['30.44' '31.6' '374.4' '4' '5.7' '621.672' '365.2' '97.2666666666666'
 '3.918944099378882'])
row51 = np.array(['30.48' '31.5' '373.4' '4' '5.9' '624.365333333333' '367.9' '98.4'
 '3.918944099378882'])
row52 = np.array(['30.51' '31.5' '375' '4' '5.7' '627.058666666666' '370.7'
 '96.1666666666666' '3.918944099378882'])
row53 = np.array(['30.48' '31.4' '376.4' '4' '5.7' '629.752' '373.3' '93.9333333333333'
 '3.918944099378882'])
row54 = np.array(['30.51' '31.5' '377.2' '4' '5.9' '634.649333333333' '376.1' '91.7'
 '3.918944099378882'])
row55 = np.array(['30.61' '31.6' '381.7' '4' '5.6' '639.546666666666' '378.4'
 '93.2666666666666' '3.918944099378882'])
row56 = np.array(['30.69' '31.7' '384.4' '4' '5.6' '644.444' '381.1' '94.8333333333333'
 '3.918944099378882'])
row57 = np.array(['30.75' '31.6' '386.3' '4' '5.4' '647.608666666666' '383.6' '96.4'
 '3.918944099378882'])
row58 = np.array(['30.72' '31.6' '385.5' '4' '5.5' '650.773333333333' '386'
 '95.7333333333333' '3.918944099378882'])
row59 = np.array(['30.75' '31.6' '386' '4' '5.5' '653.938' '388.3' '95.0666666666666'
 '3.918944099378882'])
row60 = np.array(['30.78' '31.7' '389.4' '4' '5.7' '659.232666666666' '391.5' '94.4'
 '3.918944099378882'])
row61 = np.array(['30.88' '31.6' '394.7' '4' '5.5' '664.527333333333' '393.2' '96.1'
 '3.918944099378882'])
row62 = np.array(['30.94' '31.8' '396.8' '4' '5.6' '669.822' '395.2' '97.8'
 '3.918944099378882'])
row63 = np.array(['30.91' '31.6' '400.2' '4' '5.4' '672.772666666666' '397.6' '99.5'
 '3.918944099378882'])
row64 = np.array(['30.94' '31.6' '401.8' '4' '5.4' '675.723333333333' '399.8'
 '99.1666666666666' '3.918944099378882'])
row65 = np.array(['30.95' '31.6' '402.8' '4' '5.3' '678.674' '401.7' '98.8333333333333'
 '3.918944099378882'])
row66 = np.array(['30.98' '31.5' '408.4' '4' '5.1' '683.126333333333' '404.2' '98.5'
 '3.918944099378882'])
row67 = np.array(['31.01' '31.5' '411.4' '4' '5.2' '687.578666666666' '407.1' '99.2'
 '3.918944099378882'])
row68 = np.array(['31.02' '31.6' '414.9' '4' '4.9' '692.031' '410.1' '99.8999999999999'
 '3.918944099378882'])
row69 = np.array(['31.05' '31.6' '417.7' '4' '5' '693.793666666666' '413.4' '100.6'
 '3.918944099378882'])
row70 = np.array(['31.08' '31.7' '416.6' '4' '5.1' '695.556333333333' '416.9'
 '100.366666666666' '3.918944099378882'])
row71 = np.array(['31.12' '31.7' '419.6' '4' '5.1' '697.319' '419.1' '100.133333333333'
 '3.918944099378882'])
row72 = np.array(['31.21' '31.7' '416.4' '4' '4.8' '704.142666666666' '422' '99.9'
 '3.918944099378882'])
row73 = np.array(['31.25' '31.7' '421' '4' '5' '710.966333333333' '424.7' '100.6'
 '3.918944099378882'])
row74 = np.array(['31.28' '31.8' '424.4' '4' '4.9' '717.79' '427.5' '101.3'
 '3.918944099378882'])
row75 = np.array(['31.28' '31.9' '431.4' '4' '5.1' '721.923666666666' '430.4' '102'
 '3.918944099378882'])
row76 = np.array(['31.31' '31.9' '433.3' '4' '4.7' '726.057333333333' '433.2'
 '103.133333333333' '3.918944099378882'])
row77 = np.array(['31.38' '32' '437.1' '4' '4.8' '730.191' '435.4' '104.266666666666'
 '3.918944099378882'])
row78 = np.array(['31.48' '32.1' '437.6' '4' '4.6' '736.568333333333' '437.1' '105.4'
 '3.918944099378882'])
row79 = np.array(['31.61' '32.4' '435.2' '4' '4.6' '742.945666666666' '440.1'
 '104.733333333333' '3.918944099378882'])
row80 = np.array(['31.58' '32.4' '441' '4' '4.4' '749.323' '442.9' '104.066666666666'
 '3.918944099378882'])
row81 = np.array(['31.55' '32.4' '444.4' '4' '4.4' '756.834333333333' '445.8' '103.4'
 '3.918944099378882'])
row82 = np.array(['31.62' '32.4' '452' '4' '4.3' '764.345666666666' '449.5'
 '103.233333333333' '3.918944099378882'])
row83 = np.array(['31.65' '32.5' '458.5' '4' '4.2' '771.857' '452.6' '103.066666666666'
 '3.918944099378882'])
row84 = np.array(['31.75' '32.6' '459.1' '4' '4.1' '779.816' '455.7' '102.9'
 '3.918944099378882'])
row85 = np.array(['31.85' '32.8' '461.7' '4' '4' '787.775' '459.2' '101.933333333333'
 '3.918944099378882'])
row86 = np.array(['31.88' '32.9' '465.2' '4' '4' '795.734' '462' '100.966666666666'
 '3.918944099378882'])
row87 = np.array(['32.08' '33.2' '470.2' '4' '3.8' '798.816333333333' '464.6' '100'
 '3.918944099378882'])
row88 = np.array(['32.18' '33.2' '475' '4' '3.8' '801.898666666666' '467.2'
 '98.5666666666666' '3.918944099378882'])
row89 = np.array(['32.28' '33.2' '476.9' '4' '3.8' '804.981' '469.3' '97.1333333333333'
 '3.918944099378882'])
row90 = np.array(['32.35' '33.2' '473.1' '4' '3.9' '809.866666666666' '470.1' '95.7'
 '3.918944099378882'])
row91 = np.array(['32.38' '33.3' '475.5' '4' '3.8' '814.752333333333' '471.2' '94.2'
 '3.918944099378882'])
row92 = np.array(['32.45' '33.5' '480.6' '4' '3.8' '819.638' '470.9' '92.7'
 '3.918944099378882'])
row93 = np.array(['32.65' '33.6' '483.2' '4' '3.8' '824.192666666666' '472.6' '91.2'
 '3.918944099378882'])
row94 = np.array(['32.75' '33.6' '489.2' '4' '3.7' '828.747333333333' '475.4'
 '90.2333333333333' '3.918944099378882'])
row95 = np.array(['32.85' '33.4' '488.3' '4' '3.7' '833.302' '475.7' '89.2666666666666'
 '3.918944099378882'])
row96 = np.array(['32.88' '33.3' '490.1' '4' '3.6' '836.924666666666' '477.3' '88.3'
 '3.918944099378882'])
row97 = np.array(['32.92' '33.3' '491.8' '4' '3.8' '840.547333333333' '480.2'
 '90.2333333333333' '3.918944099378882'])
row98 = np.array(['32.9' '33.4' '494.2' '4' '3.9' '844.17' '481.6' '92.1666666666666'
 '3.918944099378882'])
row99 = np.array(['33' '33.4' '493' '4' '3.8' '845.774333333333' '485.1' '94.1'
 '3.918944099378882'])
row100 = np.array(['33' '33.3' '495.8' '4' '3.8' '847.378666666666' '489.7' '94.7'
 '3.918944099378882'])
row101 = np.array(['33.1' '33.1' '501.3' '4' '3.8' '848.983' '492.1' '95.3'
 '3.918944099378882'])
row102 = np.array(['33.1' '33.3' '502.2' '4' '3.8' '854.399666666666' '497.2' '95.9'
 '3.918944099378882'])
row103 = np.array(['33.3' '33.5' '506.8' '4' '3.9' '859.816333333333' '502'
 '96.2666666666666' '3.918944099378882'])
row104 = np.array(['33.4' '33.5' '506.7' '4' '3.8' '865.233' '506.3' '96.6333333333333'
 '3.918944099378882'])
row105 = np.array(['33.5' '33.4' '509.8' '4' '3.8' '870.635' '510.8' '97'
 '3.918944099378882'])
row106 = np.array(['33.6' '33.4' '515.6' '4' '3.8' '876.036999999999' '514.7'
 '95.6333333333333' '3.918944099378882'])
row107 = np.array(['33.7' '33.4' '512.2' '4' '4' '881.439' '518.2' '94.2666666666666'
 '3.918944099378882'])
row108 = np.array(['33.9' '33.4' '517.4' '4' '3.9' '890.755' '521.2' '92.9'
 '3.918944099378882'])
row109 = np.array(['34' '33.7' '525.1' '4' '3.8' '900.070999999999' '524.8'
 '94.3333333333333' '3.918944099378882'])
row110 = np.array(['34.1' '33.8' '530.9' '4' '3.7' '909.387' '527.4' '95.7666666666666'
 '3.918944099378882'])
row111 = np.array(['34.2' '34' '533.6' '4' '3.8' '917.706' '530.4' '97.2'
 '3.918944099378882'])
row112 = np.array(['34.3' '34.1' '544.3' '4' '3.7' '926.025' '533.2' '95.6'
 '3.918944099378882'])
row113 = np.array(['34.4' '34.1' '544' '4' '3.5' '934.344' '535.7' '94' '3.918944099378882'])
row114 = np.array(['34.5' '34.2' '549.8' '4' '3.5' '939.837666666666' '538.9' '92.4'
 '3.918944099378882'])
row115 = np.array(['34.7' '34.2' '556.3' '4' '3.7' '945.331333333333' '542.6' '92.4'
 '3.918944099378882'])
row116 = np.array(['34.9' '34.3' '563.2' '4' '3.7' '950.825' '545.6' '92.4'
 '3.918944099378882'])
row117 = np.array(['35' '34.2' '567' '4' '3.5' '956.56' '549.4' '92.4' '3.918944099378882'])
row118 = np.array(['35.1' '34.4' '568.2' '4' '3.4' '962.295' '553.6' '92.1666666666666'
 '3.918944099378882'])
row119 = np.array(['35.3' '34.4' '571.6' '4' '3.4' '968.03' '557.6' '91.9333333333333'
 '3.918944099378882'])
row120 = np.array(['35.4' '34.5' '576.7' '4' '3.4' '976.465666666666' '562.4' '91.7'
 '3.918944099378882'])
row121 = np.array(['35.6' '34.6' '576.5' '4' '3.4' '984.901333333333' '566.8'
 '93.8666666666666' '3.918944099378882'])
row122 = np.array(['35.7' '34.8' '583.5' '4' '3.4' '993.337' '569.3' '96.0333333333333'
 '3.918944099378882'])
row123 = np.array(['35.8' '35' '588.7' '4' '3.4' '998.564666666666' '571.9' '98.2'
 '3.918944099378882'])
row124 = np.array(['36.1' '35.2' '588.9' '4' '3.4' '1003.79233333333' '574.4'
 '95.9666666666666' '3.918944099378882'])
row125 = np.array(['36.3' '35.3' '593.9' '4' '3.4' '1009.02' '575.7' '93.7333333333333'
 '3.918944099378882'])
row126 = np.array(['36.4' '35.5' '600.3' '4' '3.4' '1015.99866666666' '576.5' '91.5'
 '3.918944099378882'])
row127 = np.array(['36.6' '35.7' '600.9' '4' '3.5' '1022.97733333333' '578.5' '89.8'
 '3.918944099378882'])
row128 = np.array(['36.8' '35.8' '602.7' '4' '3.5' '1029.956' '579.5' '88.1'
 '3.918944099378882'])
row129 = np.array(['36.9' '35.7' '609.9' '4' '3.5' '1032.68633333333' '580.1' '86.4'
 '3.918944099378882'])
row130 = np.array(['37.1' '35.8' '613.2' '4' '3.7' '1035.41666666666' '582.1'
 '84.1666666666666' '3.918944099378882'])
row131 = np.array(['37.3' '35.9' '618.5' '4' '3.7' '1038.147' '583.4' '81.9333333333333'
 '3.918944099378882'])
row132 = np.array(['37.5' '36.1' '620.5' '4' '3.5' '1042.498' '585.4' '79.7'
 '3.918944099378882'])
row133 = np.array(['37.7' '36.3' '622.8' '4' '3.5' '1046.849' '587.9' '79.1666666666666'
 '3.918944099378882'])
row134 = np.array(['37.9' '36.5' '628.7' '10' '3.9' '1051.2' '589.6' '78.6333333333333'
 '3.918944099378882'])
row135 = np.array(['38.1' '36.7' '634' '10' '4.2' '1056.59166666666' '586.3' '78.1'
 '3.918944099378882'])
row136 = np.array(['38.3' '36.7' '632.3' '10' '4.4' '1061.98333333333' '587.3' '77.2'
 '3.918944099378882'])
row137 = np.array(['38.5' '36.8' '636' '10' '4.6' '1067.375' '588.4' '76.3'
 '3.918944099378882'])
row138 = np.array(['38.6' '36.8' '642.4' '10' '4.8' '1073.603' '591.5' '75.4'
 '3.918944099378882'])
row139 = np.array(['38.8' '36.9' '646.3' '10' '4.9' '1079.831' '595.2' '76.1333333333333'
 '3.918944099378882'])
row140 = np.array(['38.9' '37.1' '648.5' '10' '5' '1086.059' '599.1' '76.8666666666666'
 '3.918944099378882'])
row141 = np.array(['39' '36.9' '652.9' '10' '5.1' '1086.90866666666' '604.9' '77.6'
 '3.918944099378882'])
row142 = np.array(['39.2' '37.1' '659.1' '10' '5.4' '1087.75833333333' '611.2'
 '75.8666666666666' '3.918944099378882'])
row143 = np.array(['39.4' '37.1' '658.3' '10' '5.5' '1088.608' '616.4' '74.1333333333333'
 '3.918944099378882'])
row144 = np.array(['39.6' '37.1' '656.6' '10' '5.9' '1104.124' '621.1' '72.4'
 '3.918944099378882'])
row145 = np.array(['39.8' '37.1' '665.6' '10' '6.1' '1119.63999999999' '626.5' '74.3'
 '3.918944099378882'])
row146 = np.array(['39.9' '37.3' '676.1' '10' '5.9' '1135.156' '632.9' '76.2'
 '3.918944099378882'])
row147 = np.array(['39.9' '37.7' '679.4' '10' '5.9' '1142.19433333333' '641' '78.1'
 '3.918944099378882'])
row148 = np.array(['40' '37.8' '682' '10' '6' '1149.23266666666' '649.9' '78.8'
 '3.918944099378882'])
row149 = np.array(['40.1' '37.9' '688.8' '10' '5.9' '1156.271' '658.4' '79.5'
 '3.918944099378882'])
row150 = np.array(['40.3' '38.1' '691.1' '10' '5.9' '1163.40566666666' '666.7' '80.2'
 '3.918944099378882'])
row151 = np.array(['40.5' '38.2' '699.8' '10' '5.9' '1170.54033333333' '673'
 '80.8333333333333' '3.918944099378882'])
row152 = np.array(['40.6' '38.3' '698.9' '10' '6' '1177.675' '679.6' '81.4666666666666'
 '3.918944099378882'])
row153 = np.array(['40.7' '38.5' '704.9' '10' '6.1' '1181.88233333333' '685.5' '82.1'
 '3.918944099378882'])
row154 = np.array(['40.8' '38.3' '713' '10' '6' '1186.08966666666' '692.5'
 '82.0666666666666' '3.918944099378882'])
row155 = np.array(['40.9' '38.3' '715.8' '10' '5.8' '1190.297' '698.4' '82.0333333333333'
 '3.918944099378882'])
row156 = np.array(['41' '38.3' '720.9' '10' '6' '1203.73433333333' '704.6' '82'
 '3.918944099378882'])
row157 = np.array(['41.1' '38.6' '728.4' '10' '6' '1217.17166666666' '710.3' '85.6'
 '3.918944099378882'])
row158 = np.array(['41.2' '38.8' '731.5' '10' '5.8' '1230.609' '717.7' '89.2'
 '3.918944099378882'])
row159 = np.array(['41.4' '39.2' '736.2' '10' '5.7' '1242.529' '725.7' '92.8'
 '3.918944099378882'])
row160 = np.array(['41.4' '39.2' '749.2' '10' '5.8' '1254.44899999999' '733.5'
 '91.3999999999999' '3.918944099378882'])
row161 = np.array(['41.5' '39.3' '752.5' '10' '5.7' '1266.369' '738.4' '90'
 '3.918944099378882'])
row162 = np.array(['41.6' '39.5' '758' '10' '5.7' '1274.43466666666' '743.3' '88.6'
 '3.918944099378882'])
row163 = np.array(['41.7' '39.7' '761.6' '10' '5.7' '1282.50033333333' '749.7' '90.8'
 '3.918944099378882'])
row164 = np.array(['41.8' '40' '769.9' '10' '5.6' '1290.566' '759.5' '93'
 '3.918944099378882'])
row165 = np.array(['41.9' '40.1' '776.3' '10' '5.6' '1303.34533333333' '768.7' '95.2'
 '3.918944099378882'])
row166 = np.array(['42.1' '40.2' '781.1' '10' '5.5' '1316.12466666666' '778.3' '93.7'
 '3.918944099378882'])
row167 = np.array(['42.2' '40.1' '794.9' '10' '5.6' '1328.904' '786.9' '92.2'
 '3.918944099378882'])
row168 = np.array(['42.4' '40.3' '800.5' '10' '5.3' '1345.09933333333' '793.9' '90.7'
 '3.918944099378882'])
row169 = np.array(['42.5' '41.1' '806.1' '10' '5.2' '1361.29466666666' '802.3'
 '87.7666666666666' '3.918944099378882'])
row170 = np.array(['42.7' '41.6' '816.5' '10' '4.9' '1377.49' '810.3' '84.8333333333333'
 '3.918944099378882'])
row171 = np.array(['43' '42.4' '825.8' '10' '5' '1389.62233333333' '814.1' '81.9'
 '3.918944099378882'])
row172 = np.array(['43.4' '43.4' '832.8' '10' '4.9' '1401.75466666666' '815.3'
 '80.2666666666666' '3.918944099378882'])
row173 = np.array(['43.7' '43.6' '835.7' '10' '5' '1413.887' '819.7' '78.6333333333333'
 '3.918944099378882'])
row174 = np.array(['43.9' '44.5' '841.6' '10' '4.9' '1420.53733333333' '826.8' '77'
 '3.918944099378882'])
row175 = np.array(['44.2' '45.5' '844.3' '10' '4.9' '1427.18766666666' '833.3'
 '75.3333333333333' '3.918944099378882'])
row176 = np.array(['44.2' '44.9' '854.1' '10' '4.8' '1433.838' '836.5' '73.6666666666666'
 '3.918944099378882'])
row177 = np.array(['45' '47.5' '853.3' '10' '4.8' '1447.98833333333' '838.8' '72'
 '3.918944099378882'])
row178 = np.array(['45.2' '46.7' '869.2' '10' '4.8' '1462.13866666666' '839.3' '73.5'
 '3.918944099378882'])
row179 = np.array(['45.6' '46.3' '868.2' '10' '4.6' '1476.289' '842.6' '75'
 '3.918944099378882'])
row180 = np.array(['45.9' '46.5' '876.9' '10' '4.8' '1481.26233333333' '848.9' '76.5'
 '3.918944099378882'])
row181 = np.array(['46.3' '47.4' '876.6' '10' '4.9' '1486.23566666666' '855.5' '71.6'
 '3.918944099378882'])
row182 = np.array(['46.8' '49' '884.5' '10' '5.1' '1491.209' '859.7' '66.7'
 '3.918944099378882'])
row183 = np.array(['47.3' '50' '889.7' '10' '5.2' '1504.158' '864.2' '61.8'
 '3.918944099378882'])
row184 = np.array(['47.8' '50.6' '901.4' '10' '5.1' '1517.107' '870.1' '65.2333333333333'
 '3.918944099378882'])
row185 = np.array(['48.1' '51' '910.8' '10' '5.1' '1530.056' '872.9' '68.6666666666666'
 '3.918944099378882'])
row186 = np.array(['48.6' '51.8' '922.4' '10' '5.1' '1540.046' '874.6' '72.1'
 '3.918944099378882'])
row187 = np.array(['49' '52' '928' '10' '5.4' '1550.036' '877.8' '69.5333333333333'
 '3.918944099378882'])
row188 = np.array(['49.3' '54' '937.9' '10' '5.5' '1560.026' '881.4' '66.9666666666666'
 '3.918944099378882'])
row189 = np.array(['49.9' '55.9' '954.8' '10' '5.5' '1573.24366666666' '884.1' '64.4'
 '3.918944099378882'])
row190 = np.array(['50.6' '55.9' '955.1' '10' '5.9' '1586.46133333333' '887.9'
 '62.7666666666666' '3.918944099378882'])
row191 = np.array(['51' '56.9' '959.2' '10' '6' '1599.679' '893.3' '61.1333333333333'
 '3.918944099378882'])
row192 = np.array(['51.5' '57.4' '956.2' '10' '6.6' '1605.158' '898.6' '59.5'
 '3.918944099378882'])
row193 = np.array(['51.9' '57.3' '961.8' '10' '7.2' '1610.637' '902.1' '58.8666666666666'
 '3.918944099378882'])
row194 = np.array(['52.3' '57.4' '975.6' '10' '8.1' '1616.116' '906.3' '58.2333333333333'
 '3.918944099378882'])
row195 = np.array(['52.6' '57.2' '989.4' '10' '8.1' '1628.02833333333' '914.1' '57.6'
 '3.918944099378882'])
row196 = np.array(['52.8' '56.9' '990.6' '10' '8.6' '1639.94066666666' '925'
 '62.6666666666666' '3.918944099378882'])
row197 = np.array(['53' '57.5' '995' '10' '8.8' '1651.853' '935.1' '67.7333333333333'
 '3.918944099378882'])
row198 = np.array(['53.1' '57.9' '1018.9' '10' '9' '1671.17533333333' '947.9' '72.8'
 '3.918944099378882'])
row199 = np.array(['53.5' '58' '1026.8' '10' '8.8' '1690.49766666666' '963'
 '73.7666666666666' '3.918944099378882'])
row200 = np.array(['54' '58.7' '1039.8' '10' '8.6' '1709.82' '975.1' '74.7333333333333'
 '3.918944099378882'])
row201 = np.array(['54.2' '59' '1047' '10' '8.4' '1727.157' '983.1' '75.7'
 '3.918944099378882'])
row202 = np.array(['54.6' '59.4' '1054.8' '10' '8.4' '1744.494' '991.5' '75.6666666666666'
 '3.918944099378882'])
row203 = np.array(['54.9' '59.8' '1060.9' '10' '8.4' '1761.831' '997.8' '75.6333333333333'
 '3.918944099378882'])
row204 = np.array(['55.3' '59.5' '1075.8' '10' '8.3' '1781.383' '1006.9' '75.6'
 '3.918944099378882'])
row205 = np.array(['55.6' '59.7' '1092.1' '10' '8.2' '1800.935' '1016.2' '78.6'
 '3.918944099378882'])
row206 = np.array(['55.8' '59.9' '1107.1' '10' '7.9' '1820.487' '1026.6' '81.6'
 '3.918944099378882'])
row207 = np.array(['55.9' '59.9' '1107.7' '10' '7.7' '1831.102' '1040.3' '84.6'
 '3.918944099378882'])
row208 = np.array(['56' '60' '1114.9' '10' '7.6' '1841.717' '1050' '84.1666666666666'
 '3.918944099378882'])
row209 = np.array(['56.1' '60.6' '1125.4' '10' '7.7' '1852.332' '1060.8' '83.7333333333333'
 '3.918944099378882'])
row210 = np.array(['56.4' '60.8' '1122.7' '10' '7.4' '1863.74066666666' '1072.1' '83.3'
 '3.918944099378882'])
row211 = np.array(['56.7' '61.2' '1140.5' '10' '7.6' '1875.14933333333' '1077.6'
 '85.4333333333333' '3.918944099378882'])
row212 = np.array(['57' '61.6' '1149.6' '10' '7.8' '1886.558' '1086.3' '87.5666666666666'
 '3.918944099378882'])
row213 = np.array(['57.3' '61.4' '1158' '10' '7.8' '1902.463' '1098.7' '89.7'
 '3.918944099378882'])
row214 = np.array(['57.6' '61.8' '1168.8' '10' '7.6' '1918.368' '1110.8' '88.8'
 '3.918944099378882'])
row215 = np.array(['57.9' '61.9' '1176.8' '10' '7.7' '1934.273' '1125' '87.9'
 '3.918944099378882'])
row216 = np.array(['58.1' '62' '1189' '10' '7.8' '1952.398' '1138.2' '87'
 '3.918944099378882'])
row217 = np.array(['58.4' '62.5' '1211.5' '10' '7.8' '1970.523' '1152' '87.0333333333333'
 '3.918944099378882'])
row218 = np.array(['58.7' '62.8' '1215' '10' '7.5' '1988.648' '1165.2' '87.0666666666666'
 '3.918944099378882'])
row219 = np.array(['59.3' '63.5' '1231.3' '10' '7.6' '2011.06833333333' '1177.6' '87.1'
 '3.918944099378882'])
row220 = np.array(['59.6' '64.1' '1238.3' '10' '7.4' '2033.48866666666' '1188.5'
 '88.1333333333333' '3.918944099378882'])
row221 = np.array(['60' '64.9' '1247.3' '10' '7.2' '2055.909' '1199.6' '89.1666666666666'
 '3.918944099378882'])
row222 = np.array(['60.2' '65.2' '1257.1' '10' '7' '2076.76366666666' '1209' '90.2'
 '3.918944099378882'])
row223 = np.array(['60.5' '65' '1263.6' '10' '7.2' '2097.61833333333' '1217.8' '89.8'
 '3.918944099378882'])
row224 = np.array(['60.8' '65.1' '1280.5' '10' '6.9' '2118.473' '1226.7' '89.4'
 '3.918944099378882'])
row225 = np.array(['61.1' '65' '1285.7' '10' '7' '2133.73866666666' '1237' '89'
 '3.918944099378882'])
row226 = np.array(['61.3' '65.3' '1294.5' '10' '6.8' '2149.00433333333' '1246.2'
 '87.4666666666666' '3.918944099378882'])
row227 = np.array(['61.6' '65.6' '1311.4' '10' '6.8' '2164.27' '1254' '85.9333333333333'
 '3.918944099378882'])
row228 = np.array(['62' '65.8' '1327' '10' '6.8' '2177.1' '1262.4' '84.4'
 '3.918944099378882'])
row229 = np.array(['62.3' '66.2' '1336' '10' '6.4' '2189.93' '1270.3' '84.05'
 '3.918944099378882'])
row230 = np.array(['62.7' '66.8' '1329.5' '10' '6.4' '2202.76' '1279.7' '83.7'
 '3.918944099378882'])
row231 = np.array(['63' '67.5' '1355.1' '10' '6.3' '2245.71766666666' '1285.5' '84.3'
 '3.918944099378882'])
row232 = np.array(['63.4' '68.1' '1377.5' '10' '6.3' '2288.67533333333' '1292.2' '78.8'
 '3.918944099378882'])
row233 = np.array(['63.9' '69' '1396.4' '10' '6.1' '2331.633' '1300.4' '81.6'
 '3.918944099378882'])
row234 = np.array(['64.5' '69.5' '1412' '10' '6' '2352.77299999999' '1310.5' '82.9'
 '3.918944099378882'])
row235 = np.array(['65' '70' '1425.8' '10' '5.9' '2373.913' '1318.5' '80'
 '3.918944099378882'])
row236 = np.array(['65.5' '70.4' '1426.8' '10' '6.2' '2395.053' '1324.1' '82.4'
 '3.918944099378882'])
row237 = np.array(['65.9' '70.4' '1447' '10' '5.9' '2422.35166666666' '1333.5' '78.4'
 '3.918944099378882'])
row238 = np.array(['66.5' '71' '1452.9' '10' '6' '2449.65033333333' '1345' '80.4'
 '3.918944099378882'])
row239 = np.array(['67.1' '71.8' '1466.9' '10' '5.8' '2476.949' '1352.3' '79.3'
 '3.918944099378882'])
row240 = np.array(['67.5' '72.1' '1480.6' '10' '5.9' '2493.50266666666' '1359.1' '75'
 '3.918944099378882'])
row241 = np.array(['67.9' '72.7' '1496.5' '10' '6' '2510.05633333333' '1366' '66.1'
 '3.918944099378882'])
row242 = np.array(['68.5' '73.8' '1502.4' '10' '5.9' '2526.61' '1371.6' '72.1'
 '3.918944099378882'])
row243 = np.array(['69.2' '74.9' '1517.8' '10' '5.9' '2548.15566666666' '1377.8' '73.9'
 '3.918944099378882'])
row244 = np.array(['69.9' '75.8' '1531.2' '10' '5.8' '2569.70133333333' '1387.8' '68.4'
 '3.918944099378882'])
row245 = np.array(['70.6' '76.9' '1538.4' '10' '5.8' '2591.247' '1402.1' '66'
 '3.918944099378882'])
row246 = np.array(['71.4' '77.5' '1558.8' '10' '5.6' '2616.68633333333' '1410.2' '68.1'
 '3.918944099378882'])
row247 = np.array(['72.2' '78' '1575.7' '10' '5.7' '2642.12566666666' '1423' '65.8'
 '3.918944099378882'])
row248 = np.array(['73' '79.2' '1586.1' '10' '5.7' '2667.565' '1434.8' '60.4'
 '3.918944099378882'])
row249 = np.array(['73.7' '79.6' '1615.6' '10' '6' '2686.33766666666' '1446.6' '64.5'
 '3.918944099378882'])
row250 = np.array(['74.4' '80.9' '1633.9' '10' '5.9' '2705.11033333333' '1454.1' '66.7'
 '3.918944099378882'])
row251 = np.array(['75.2' '82.1' '1641.6' '10' '6' '2723.883' '1460.4' '62.1'
 '3.918944099378882'])
row252 = np.array(['76' '82.6' '1657.3' '10' '5.9' '2745.86933333333' '1465.9' '63.3'
 '3.918944099378882'])
row253 = np.array(['76.9' '83.4' '1666.3' '10' '6' '2767.85566666666' '1473.7' '61'
 '3.918944099378882'])
row254 = np.array(['78' '85.2' '1697.3' '10' '6.3' '2789.842' '1482.7' '67'
 '3.918944099378882'])
row255 = np.array(['79' '86.9' '1701.4' '10' '6.3' '2792.34533333333' '1494.6' '66.9'
 '3.918944099378882'])
row256 = np.array(['80.1' '87.5' '1708.2' '10' '6.3' '2794.84866666666' '1499.8' '56.5'
 '3.918944099378882'])
row257 = np.array(['80.9' '87.8' '1695.2' '10' '6.9' '2797.352' '1502.2' '52.7'
 '3.918944099378882'])
row258 = np.array(['81.7' '88.3' '1700.1' '10' '7.5' '2817.06233333333' '1512.3' '51.7'
 '3.918944099378882'])
row259 = np.array(['82.5' '88.7' '1718.8' '10' '7.6' '2836.77266666666' '1529.2' '58.7'
 '3.918944099378882'])
row260 = np.array(['82.6' '90.3' '1747.1' '10' '7.8' '2856.483' '1545.5' '62.3'
 '3.918944099378882'])
row261 = np.array(['83.2' '91.5' '1763.8' '10' '7.7' '2899.50766666666' '1561.5' '67.3'
 '3.918944099378882'])
row262 = np.array(['83.9' '91.7' '1780.5' '10' '7.5' '2942.53233333333' '1574' '73.7'
 '3.918944099378882'])
row263 = np.array(['84.7' '92.8' '1817.1' '10' '7.5' '2985.557' '1584.8' '75'
 '3.918944099378882'])
row264 = np.array(['85.6' '93.2' '1826.8' '10' '7.5' '3031.77333333333' '1595.8' '76.7'
 '3.918944099378882'])
row265 = np.array(['86.4' '93.8' '1851.7' '10' '7.2' '3077.98966666666' '1599.8' '64.5'
 '3.918944099378882'])
row266 = np.array(['87.2' '95.2' '1870' '10' '7.5' '3124.206' '1606.9' '71.4'
 '3.918944099378882'])
row267 = np.array(['88' '96.1' '1884.2' '10' '7.4' '3136.98133333333' '1618.7' '66.9'
 '3.918944099378882'])
row268 = np.array(['88.6' '97' '1902.9' '10' '7.4' '3149.75666666666' '1636.6' '66.5'
 '3.918944099378882'])
row269 = np.array(['89.1' '98' '1904.4' '10' '7.2' '3162.532' '1659.2' '72.4'
 '3.918944099378882'])
row270 = np.array(['89.7' '98.3' '1913.8' '10' '7.5' '3195.22433333333' '1664.2' '76.3'
 '3.918944099378882'])
row271 = np.array(['90.5' '98.5' '1934.5' '10' '7.5' '3227.91666666666' '1670.3' '73.1'
 '3.918944099378882'])
row272 = np.array(['91.5' '99' '1942.1' '10' '7.2' '3260.609' '1681.9' '74.1'
 '3.918944099378882'])
row273 = np.array(['92.2' '99' '1966.6' '10' '7.4' '3267.34533333333' '1694.3' '77.2'
 '3.918944099378882'])
row274 = np.array(['93.1' '98.8' '1965.5' '10' '7.6' '3274.08166666666' '1706' '73.1'
 '3.918944099378882'])
row275 = np.array(['93.4' '98.9' '1963.9' '10' '7.9' '3280.818' '1721.8' '70.3'
 '3.918944099378882'])
row276 = np.array(['93.8' '98.8' '1970.6' '10' '8.3' '3278.646' '1736.1' '62.5'
 '3.918944099378882'])
row277 = np.array(['94.1' '98.8' '1988.8' '10' '8.5' '3276.474' '1755.5' '64.3'
 '3.918944099378882'])
row278 = np.array(['94.4' '99.7' '1997.1' '10' '8.6' '3274.302' '1770.4' '71'
 '3.918944099378882'])
row279 = np.array(['94.7' '99.8' '2021.2' '10' '8.9' '3293.52533333333' '1774.5' '66.5'
 '3.918944099378882'])
row280 = np.array(['94.7' '99.6' '2024.1' '10' '9' '3312.74866666666' '1786.5' '62'
 '3.918944099378882'])
row281 = np.array(['95' '99.6' '2026.3' '10' '9.3' '3331.972' '1803.9' '65.5'
 '3.918944099378882'])
row282 = np.array(['95.9' '99.8' '2044.5' '10' '9.4' '3343.422' '1815.4' '67.5'
 '3.918944099378882'])
row283 = np.array(['97' '100' '2048.1' '10' '9.6' '3354.872' '1826' '65.7'
 '3.918944099378882'])
row284 = np.array(['97.5' '100.4' '2072.2' '10' '9.8' '3366.322' '1831.5' '65.4'
 '3.918944099378882'])
row285 = np.array(['97.7' '100.3' '2080.1' '10' '9.8' '3378.40166666666' '1845.2' '65.4'
 '3.918944099378882'])
row286 = np.array(['97.7' '100' '2104.6' '10' '10.1' '3390.48133333333' '1858.4' '69.3'
 '3.918944099378882'])
row287 = np.array(['98.1' '100.2' '2125.8' '10' '10.4' '3402.561' '1869.7' '73.4'
 '3.918944099378882'])
row288 = np.array(['98' '100.3' '2149.3' '10' '10.8' '3426.17833333333' '1883.7' '72.1'
 '3.918944099378882'])
row289 = np.array(['97.7' '100.5' '2161.6' '10' '10.8' '3449.79566666666' '1905.9' '71.9'
 '3.918944099378882'])
row290 = np.array(['97.9' '100.2' '2174' '5.5' '10.4' '3473.413' '1959.4' '70.4'
 '3.918944099378882'])
row291 = np.array(['98' '100.5' '2177' '5.5' '10.4' '3508.558' '1996.8' '74.6'
 '3.918944099378882'])
row292 = np.array(['98.1' '100.4' '2202.8' '5.5' '10.3' '3543.703' '2015.2' '80.8'
 '3.918944099378882'])
row293 = np.array(['98.8' '100.4' '2226.4' '5.5' '10.2' '3578.848' '2028.6' '89.1'
 '3.918944099378882'])
row294 = np.array(['99.2' '100.8' '2245.9' '5.5' '10.1' '3615.625' '2043.1' '93.3'
 '3.918944099378882'])
row295 = np.array(['99.4' '101' '2276' '5.5' '10.1' '3652.402' '2053.5' '92.2'
 '3.918944099378882'])
row296 = np.array(['99.8' '101.3' '2304.4' '5.5' '9.4' '3689.179' '2064.8' '92.8'
 '3.918944099378882'])
row297 = np.array(['100.1' '101.8' '2320.4' '5.5' '9.5' '3724.35466666666' '2074' '90.9'
 '3.918944099378882'])
row298 = np.array(['100.4' '102' '2334.9' '5.5' '9.2' '3759.53033333333' '2083.2' '89.9'
 '3.918944099378882'])
row299 = np.array(['100.8' '102.2' '2357.6' '5.5' '8.8' '3794.706' '2099.2' '89.3'
 '3.918944099378882'])
row300 = np.array(['101.1' '102.1' '2366.3' '5.5' '8.5' '3832.48866666666' '2112.3' '91.1'
 '3.918944099378882'])
row301 = np.array(['101.4' '102.3' '2393.6' '5.5' '8.3' '3870.27133333333' '2123.5' '94.2'
 '3.918944099378882'])
row302 = np.array(['102.1' '102.9' '2419.4' '5.5' '8' '3908.054' '2138.2' '100.1'
 '3.918944099378882'])
row303 = np.array(['102.6' '103.2' '2403.5' '5.5' '7.8' '3941.903' '2158.2' '97.4'
 '3.918944099378882'])
row304 = np.array(['102.9' '103.9' '2431.6' '5.5' '7.8' '3975.752' '2175.2' '101'
 '3.918944099378882'])
row305 = np.array(['103.3' '104' '2457.5' '5.5' '7.7' '4009.601' '2191.7' '96.1'
 '3.918944099378882'])
row306 = np.array(['103.5' '104.1' '2474.5' '5.5' '7.4' '4034.484' '2204.1' '98.1'
 '3.918944099378882'])
row307 = np.array(['103.7' '104' '2495.6' '5.5' '7.2' '4059.367' '2215.1' '95.5'
 '3.918944099378882'])
row308 = np.array(['104.1' '104.2' '2494.6' '5.5' '7.5' '4084.25' '2223.5' '96.6'
 '3.918944099378882'])
row309 = np.array(['104.4' '103.8' '2512.2' '5.5' '7.5' '4105.68366666666' '2230.4' '99.1'
 '3.918944099378882'])
row310 = np.array(['104.7' '103.4' '2533.8' '5.5' '7.3' '4127.11733333333' '2244.4' '100.9'
 '3.918944099378882'])
row311 = np.array(['105.1' '103.4' '2531.3' '5.5' '7.4' '4148.551' '2258.9' '96.3'
 '3.918944099378882'])
row312 = np.array(['105.3' '103.7' '2571.4' '5.5' '7.2' '4175.75666666666' '2281.4' '95.7'
 '3.918944099378882'])
row313 = np.array(['105.5' '103.5' '2582.6' '5.5' '7.3' '4202.96233333333' '2306.4' '92.9'
 '3.918944099378882'])
row314 = np.array(['105.7' '103.4' '2618.8' '5.5' '7.3' '4230.168' '2332.4' '96'
 '3.918944099378882'])
row315 = np.array(['106.3' '103.3' '2640.8' '5.5' '7.2' '4251.741' '2354.1' '93.7'
 '3.918944099378882'])
row316 = np.array(['106.8' '103.1' '2648.5' '5.5' '7.2' '4273.31399999999' '2366.2' '93.7'
 '3.918944099378882'])
row317 = np.array(['107' '103.3' '2659.5' '5.5' '7.3' '4294.887' '2375.4' '94.6'
 '3.918944099378882'])
row318 = np.array(['107.2' '103.5' '2696.4' '5.5' '7.2' '4325.51566666666' '2389.5' '91.8'
 '3.918944099378882'])
row319 = np.array(['107.5' '103.3' '2689.4' '5.5' '7.4' '4356.14433333333' '2412.6' '96.5'
 '3.918944099378882'])
row320 = np.array(['107.7' '103.2' '2715.7' '5.5' '7.4' '4386.773' '2429.5' '94'
 '3.918944099378882'])
row321 = np.array(['107.9' '102.7' '2752.1' '5.5' '7.1' '4405.88' '2444' '92.4'
 '3.918944099378882'])
row322 = np.array(['108.1' '102.1' '2794.7' '5.5' '7.1' '4424.987' '2456.4' '92.1'
 '3.918944099378882'])
row323 = np.array(['108.5' '102.9' '2755.8' '5.5' '7.1' '4444.094' '2468' '88.4'
 '3.918944099378882'])
row324 = np.array(['109' '103.4' '2771.1' '5.5' '7' '4465.36066666666' '2477.8' '90.9'
 '3.918944099378882'])
row325 = np.array(['109.5' '103.6' '2811.3' '5.5' '7' '4486.62733333333' '2492.1' '93.9'
 '3.918944099378882'])
row326 = np.array(['109.9' '103.2' '2827.1' '5.5' '6.7' '4507.894' '2502.1' '95.6'
 '3.918944099378882'])
row327 = np.array(['109.7' '101.7' '2820.2' '5.5' '7.2' '4520.376' '2512.9' '95.9'
 '3.918944099378882'])
row328 = np.array(['109.1' '100.3' '2823.6' '5.5' '7.2' '4532.858' '2533.1' '95.1'
 '3.918944099378882'])
row329 = np.array(['108.7' '99.6' '2835.2' '5.5' '7.1' '4545.34' '2557.8' '96.2'
 '3.918944099378882'])
row330 = np.array(['109' '100' '2857.5' '5.5' '7.2' '4566.11633333333' '2584.8' '94.8'
 '3.918944099378882'])
row331 = np.array(['109.4' '99.9' '2861.7' '5.5' '7.2' '4586.89266666666' '2605' '99.3'
 '3.918944099378882'])
row332 = np.array(['109.5' '99.4' '2881.2' '5.5' '7' '4607.669' '2626.6' '97.7'
 '3.918944099378882'])
row333 = np.array(['109.6' '99.3' '2898.6' '5.5' '6.9' '4624.32166666666' '2646.5' '94.9'
 '3.918944099378882'])
row334 = np.array(['110' '99.4' '2971.8' '5.5' '7' '4640.97433333333' '2667.8' '91.9'
 '3.918944099378882'])
row335 = np.array(['110.2' '99.7' '2932.9' '5.5' '7' '4657.627' '2687.4' '95.6'
 '3.918944099378882'])
row336 = np.array(['110.4' '99.8' '2928.4' '5.5' '6.9' '4679.13666666666' '2701.3' '91.4'
 '3.918944099378882'])
row337 = np.array(['110.8' '99.7' '2997.1' '5.5' '6.6' '4700.64633333333' '2728' '89.1'
 '3.918944099378882'])
row338 = np.array(['111.4' '100.5' '2935.5' '5.5' '6.6' '4722.156' '2743.9' '90.4'
 '3.918944099378882'])
row339 = np.array(['111.8' '101' '3001.7' '5.5' '6.6' '4750.15733333333' '2747.5' '90.2'
 '3.918944099378882'])
row340 = np.array(['112.2' '101.2' '3013.3' '5.5' '6.6' '4778.15866666666' '2753.7' '90.8'
 '3.918944099378882'])
row341 = np.array(['112.7' '101.9' '3038.8' '5.5' '6.3' '4806.16' '2767.7' '92.8'
 '3.918944099378882'])
row342 = np.array(['113' '102.6' '3048.4' '5.5' '6.3' '4832.29166666666' '2772.9' '91.1'
 '3.918944099378882'])
row343 = np.array(['113.5' '103' '3072.8' '5.5' '6.2' '4858.42333333333' '2774.6' '91.5'
 '3.918944099378882'])
row344 = np.array(['113.8' '103.5' '3094.7' '5.5' '6.1' '4884.555' '2779' '93.7'
 '3.918944099378882'])
row345 = np.array(['114.3' '103.8' '3130.8' '5.5' '6' '4925.70133333333' '2788.2' '94.4'
 '3.918944099378882'])
row346 = np.array(['114.7' '103.7' '3126.5' '5.5' '5.9' '4966.84766666666' '2799.5' '93.6'
 '3.918944099378882'])
row347 = np.array(['115' '104.1' '3134.5' '5.5' '6' '5007.994' '2814.8' '89.3'
 '3.918944099378882'])
row348 = np.array(['115.4' '104.2' '3144.2' '5.5' '5.8' '5029.78666666666' '2818.9' '83.1'
 '3.918944099378882'])
row349 = np.array(['115.6' '104.2' '3174.1' '5.5' '5.7' '5051.57933333333' '2826.4' '86.8'
 '3.918944099378882'])
row350 = np.array(['116' '104.6' '3213.7' '5.5' '5.7' '5073.372' '2847.4' '90.8'
 '3.918944099378882'])
row351 = np.array(['116.2' '104.8' '3221.4' '5.5' '5.7' '5112.26' '2870.4' '91.6'
 '3.918944099378882'])
row352 = np.array(['116.5' '104.9' '3260.5' '5.5' '5.7' '5151.148' '2890.7' '94.6'
 '3.918944099378882'])
row353 = np.array(['117.2' '105.8' '3263' '5.5' '5.4' '5190.036' '2910.7' '91.2'
 '3.918944099378882'])
row354 = np.array(['117.5' '106.5' '3293.6' '5.5' '5.6' '5220.969' '2926' '94.8'
 '3.918944099378882'])
row355 = np.array(['118' '107.2' '3318.5' '5.5' '5.4' '5251.902' '2938.4' '94.7'
 '3.918944099378882'])
row356 = np.array(['118.5' '107.9' '3342.7' '5.5' '5.4' '5282.835' '2947.2' '93.4'
 '3.918944099378882'])
row357 = np.array(['119' '108' '3368' '5.5' '5.6' '5321.72633333333' '2952' '97.4'
 '3.918944099378882'])
row358 = np.array(['119.5' '108.1' '3375' '5.5' '5.4' '5360.61766666666' '2956.9' '97.3'
 '3.918944099378882'])
row359 = np.array(['119.9' '108.2' '3413.7' '5.5' '5.4' '5399.509' '2965.3' '94.1'
 '3.918944099378882'])
row360 = np.array(['120.3' '108.3' '3430.2' '5.5' '5.3' '5436.757' '2980.2' '93'
 '3.918944099378882'])
row361 = np.array(['120.7' '109' '3459.7' '5.5' '5.3' '5474.005' '2988.2' '91.9'
 '3.918944099378882'])
row362 = np.array(['121.2' '110.5' '3483.7' '5.5' '5.4' '5511.253' '2991.7' '97.9'
 '3.918944099378882'])
row363 = np.array(['121.6' '110.8' '3488' '5.5' '5.2' '5544.98966666666' '2992.2' '95.4'
 '3.918944099378882'])
row364 = np.array(['122.2' '111.5' '3498.8' '5.5' '5' '5578.72633333333' '2999.7' '94.3'
 '3.918944099378882'])
row365 = np.array(['123.1' '112.3' '3543' '5.5' '5.2' '5612.463' '3006' '91.5'
 '3.918944099378882'])
row366 = np.array(['123.7' '113.2' '3551.8' '5.5' '5.2' '5640.097' '3011.6' '90.7'
 '3.918944099378882'])
row367 = np.array(['124.1' '112.9' '3566.6' '5.5' '5.3' '5667.731' '3027.9' '90.6'
 '3.918944099378882'])
row368 = np.array(['124.5' '112.8' '3585.7' '5.5' '5.2' '5695.365' '3052.4' '92'
 '3.918944099378882'])
row369 = np.array(['124.5' '112' '3620.6' '5.5' '5.2' '5712.65566666666' '3074.4' '89.6'
 '3.918944099378882'])
row370 = np.array(['124.8' '112.4' '3621.9' '5.5' '5.3' '5729.94633333333' '3092.5' '95.8'
 '3.918944099378882'])
row371 = np.array(['125.4' '112.8' '3633.6' '5.5' '5.3' '5747.237' '3114.1' '93.9'
 '3.918944099378882'])
row372 = np.array(['125.9' '112.7' '3643.3' '5.5' '5.4' '5789.05833333333' '3133.3' '90.9'
 '3.918944099378882'])
row373 = np.array(['126.3' '113' '3684.2' '5.5' '5.4' '5830.87966666666' '3152.5' '90.5'
 '3.918944099378882'])
row374 = np.array(['127.5' '114.9' '3730.7' '5.5' '5.4' '5872.701' '3166.8' '93'
 '3.918944099378882'])
row375 = np.array(['128' '114.4' '3728.2' '5.5' '5.3' '5901.81' '3179.2' '89.5'
 '3.918944099378882'])
row376 = np.array(['128.6' '114.2' '3754.9' '5.5' '5.2' '5930.919' '3190.1' '91.3'
 '3.918944099378882'])
row377 = np.array(['128.9' '114.1' '3770' '5.5' '5.4' '5960.028' '3201.6' '93.9'
 '3.918944099378882'])
row378 = np.array(['129.1' '114.6' '3775.8' '5.5' '5.4' '5978.39066666666' '3200.6' '90.6'
 '3.918944099378882'])
row379 = np.array(['129.9' '114.3' '3804.5' '5.5' '5.2' '5996.75333333333' '3213.7' '88.3'
 '3.918944099378882'])
row380 = np.array(['130.5' '114.5' '3821.7' '5.5' '5.5' '6015.116' '3224.5' '88.2'
 '3.918944099378882'])
row381 = np.array(['131.6' '116.5' '3848.3' '5.5' '5.7' '6011.655' '3242' '76.4'
 '3.918944099378882'])
row382 = np.array(['132.5' '118.4' '3870.1' '5.5' '5.9' '6008.194' '3254.6' '72.8'
 '3.918944099378882'])
row383 = np.array(['133.4' '120.8' '3870.6' '5.5' '5.9' '6004.733' '3259.3' '63.9'
 '3.918944099378882'])
row384 = np.array(['133.7' '120.1' '3871.9' '5.5' '6.2' '6014.88133333333' '3262.6' '66'
 '3.918944099378882'])
row385 = np.array(['134.2' '118.7' '3861.3' '5.5' '6.3' '6025.02966666666' '3271.8' '65.5'
 '3.918944099378882'])
row386 = np.array(['134.7' '119' '3841' '5.5' '6.4' '6035.178' '3287.7' '66.8'
 '3.918944099378882'])
row387 = np.array(['134.8' '117.2' '3866.7' '5.5' '6.6' '6065.73933333333' '3304.5' '70.4'
 '3.918944099378882'])
row388 = np.array(['134.8' '116.2' '3913' '5.5' '6.8' '6096.30066666666' '3321.9' '87.7'
 '3.918944099378882'])
row389 = np.array(['135.1' '116' '3907.1' '5.5' '6.7' '6126.862' '3332.4' '81.8'
 '3.918944099378882'])
row390 = np.array(['135.6' '116.5' '3933.2' '5.5' '6.9' '6153.22033333333' '3343' '78.3'
 '3.918944099378882'])
row391 = np.array(['136' '116.4' '3940.5' '5.5' '6.9' '6179.57866666666' '3351.9' '82.1'
 '3.918944099378882'])
row392 = np.array(['136.2' '116.1' '3966' '5.5' '6.8' '6205.937' '3356.1' '82.9'
 '3.918944099378882'])
row393 = np.array(['136.6' '116.2' '3969.1' '5.5' '6.9' '6225.47133333333' '3355' '82'
 '3.918944099378882'])
row394 = np.array(['137' '116.1' '3984.7' '5.5' '6.9' '6245.00566666666' '3354.9' '83'
 '3.918944099378882'])
row395 = np.array(['137.2' '116.4' '3976' '5.5' '7' '6264.54' '3360.1' '78.3'
 '3.918944099378882'])
row396 = np.array(['137.8' '116.4' '4003.6' '5.5' '7' '6297.394' '3365.5' '69.1'
 '3.918944099378882'])
row397 = np.array(['138.2' '115.9' '4020.5' '5.5' '7.3' '6330.248' '3372.2' '68.2'
 '3.918944099378882'])
row398 = np.array(['138.3' '115.6' '4084.7' '5.5' '7.3' '6363.102' '3381.2' '67.5'
 '3.918944099378882'])
row399 = np.array(['138.6' '116' '4099.5' '5.5' '7.4' '6398.989' '3400' '68.8'
 '3.918944099378882'])
row400 = np.array(['139.1' '116.1' '4117' '5.5' '7.4' '6434.876' '3403.9' '76'
 '3.918944099378882'])
row401 = np.array(['139.4' '116.3' '4131.5' '5.5' '7.4' '6470.763' '3399.7' '77.2'
 '3.918944099378882'])
row402 = np.array(['139.7' '117.2' '4158.4' '5.5' '7.6' '6502.72233333333' '3398.6' '79.2'
 '3.918944099378882'])
row403 = np.array(['140.1' '118' '4177.1' '5.5' '7.8' '6534.68166666666' '3393.4' '80.4'
 '3.918944099378882'])
row404 = np.array(['140.5' '117.9' '4204.8' '5.5' '7.7' '6566.641' '3393.9' '76.6'
 '3.918944099378882'])
row405 = np.array(['140.8' '117.7' '4220.9' '5.5' '7.6' '6604.695' '3398.8' '76.1'
 '3.918944099378882'])
row406 = np.array(['141.1' '118' '4255.3' '5.5' '7.6' '6642.749' '3410.3' '75.6'
 '3.918944099378882'])
row407 = np.array(['141.7' '118.1' '4284.7' '5.5' '7.3' '6680.803' '3423.8' '73.3'
 '3.918944099378882'])
row408 = np.array(['142.1' '117.8' '4300.5' '5.5' '7.4' '6697.02166666666' '3426.5' '85.3'
 '3.918944099378882'])
row409 = np.array(['142.3' '117.6' '4336.4' '5.5' '7.4' '6713.24033333333' '3424.7' '91'
 '3.918944099378882'])
row410 = np.array(['142.8' '118' '4340.7' '5.5' '7.3' '6729.459' '3419.1' '89.3'
 '3.918944099378882'])
row411 = np.array(['143.1' '118.4' '4355.3' '5.5' '7.1' '6755.95233333333' '3414.5' '86.6'
 '3.918944099378882'])
row412 = np.array(['143.3' '118.7' '4352.5' '5.5' '7' '6782.44566666666' '3411.7' '85.9'
 '3.918944099378882'])
row413 = np.array(['143.8' '119.3' '4393.4' '5.5' '7.1' '6808.939' '3411.3' '85.6'
 '3.918944099378882'])
row414 = np.array(['144.2' '119.7' '4422.4' '5.5' '7.1' '6833.32533333333' '3436.9' '80.3'
 '3.918944099378882'])
row415 = np.array(['144.3' '119.5' '4440' '5.5' '7' '6857.71166666666' '3442.4' '81.5'
 '3.918944099378882'])
row416 = np.array(['144.5' '119.2' '4468.9' '5.5' '6.9' '6882.098' '3442' '77'
 '3.918944099378882'])
row417 = np.array(['144.8' '118.7' '4481.1' '5.5' '6.8' '6925.978' '3445.7' '77.3'
 '3.918944099378882'])
row418 = np.array(['145' '118.7' '4511.5' '5.5' '6.7' '6969.858' '3452.2' '77.9'
 '3.918944099378882'])
row419 = np.array(['145.6' '119.1' '4532.8' '5.5' '6.8' '7013.738' '3456.7' '82.7'
 '3.918944099378882'])
row420 = np.array(['146' '119' '4554.1' '5.5' '6.6' '7047.70933333333' '3470.1' '81.2'
 '3.918944099378882'])
row421 = np.array(['146.3' '118.6' '4571.1' '5.5' '6.5' '7081.68066666666' '3474.5' '88.2'
 '3.918944099378882'])
row422 = np.array(['146.3' '119.1' '4585.1' '5.5' '6.6' '7115.652' '3474.9' '94.3'
 '3.918944099378882'])
row423 = np.array(['146.7' '119.3' '4632.6' '5.5' '6.6' '7159.41166666666' '3475.7' '93.2'
 '3.918944099378882'])
row424 = np.array(['147.1' '119.7' '4646' '5.5' '6.5' '7203.17133333333' '3480.1' '91.5'
 '3.918944099378882'])
row425 = np.array(['147.2' '119.7' '4671.1' '5.5' '6.4' '7246.931' '3481.3' '92.6'
 '3.918944099378882'])
row426 = np.array(['147.5' '119.9' '4669.5' '5.5' '6.1' '7274.97899999999' '3490.8' '92.8'
 '3.918944099378882'])
row427 = np.array(['147.9' '120.5' '4708.9' '5.5' '6.1' '7303.027' '3479.5' '91.2'
 '3.918944099378882'])
row428 = np.array(['148.4' '120.7' '4720.6' '5.5' '6.1' '7331.075' '3488.2' '89'
 '3.918944099378882'])
row429 = np.array(['149' '121.2' '4762.6' '5.5' '6' '7372.47933333333' '3485.7' '91.7'
 '3.918944099378882'])
row430 = np.array(['149.3' '121' '4775' '5.5' '5.9' '7413.88366666666' '3486.1' '91.5'
 '3.918944099378882'])
row431 = np.array(['149.4' '120.9' '4812.9' '5.5' '5.8' '7455.288' '3484.3' '92.7'
 '3.918944099378882'])
row432 = np.array(['149.8' '121.5' '4825.6' '5.5' '5.6' '7477.62166666666' '3487.2' '91.6'
 '3.918944099378882'])
row433 = np.array(['150.1' '121.9' '4841.6' '5.5' '5.5' '7499.95533333333' '3486.4' '95.1'
 '3.918944099378882'])
row434 = np.array(['150.5' '122.9' '4851.2' '5.5' '5.6' '7522.289' '3492.4' '97.6'
 '3.918944099378882'])
row435 = np.array(['150.9' '123.5' '4850.8' '5.5' '5.4' '7541.85833333333' '3489.9' '95.1'
 '3.918944099378882'])
row436 = np.array(['151.2' '123.9' '4885.4' '5.5' '5.4' '7561.42766666666' '3491.1' '90.3'
 '3.918944099378882'])
row437 = np.array(['151.8' '124.6' '4890.2' '5.5' '5.8' '7580.997' '3499.2' '92.5'
 '3.918944099378882'])
row438 = np.array(['152.1' '124.9' '4933.1' '5.5' '5.6' '7615.03966666666' '3524.2' '89.8'
 '3.918944099378882'])
row439 = np.array(['152.4' '125.3' '4977.5' '5.5' '5.6' '7649.08233333333' '3548.9' '92.7'
 '3.918944099378882'])
row440 = np.array(['152.6' '125.3' '4970.2' '5.5' '5.7' '7683.125' '3567.4' '94.4'
 '3.918944099378882'])
row441 = np.array(['152.9' '125.1' '5005.3' '5.5' '5.7' '7712.94533333333' '3589' '96.2'
 '3.918944099378882'])
row442 = np.array(['153.1' '125.2' '5020.5' '5.5' '5.6' '7742.76566666666' '3602.1' '88.9'
 '3.918944099378882'])
row443 = np.array(['153.5' '125.3' '5013.9' '5.5' '5.5' '7772.586' '3613.4' '90.2'
 '3.918944099378882'])
row444 = np.array(['153.7' '125.4' '5055.6' '5.5' '5.6' '7804.54666666666' '3619.9' '88.2'
 '3.918944099378882'])
row445 = np.array(['153.9' '125.7' '5097.5' '5.5' '5.6' '7836.50733333333' '3629.5' '91'
 '3.918944099378882'])
row446 = np.array(['154.7' '126.3' '5085.7' '5.5' '5.6' '7868.468' '3647.9' '89.3'
 '3.918944099378882'])
row447 = np.array(['155' '126.2' '5132.8' '5.5' '5.5' '7923.25866666666' '3661.8' '88.5'
 '3.918944099378882'])
row448 = np.array(['155.5' '126.4' '5173.3' '5.5' '5.5' '7978.04933333333' '3686.9' '93.7'
 '3.918944099378882'])
row449 = np.array(['156.1' '127.4' '5208' '5.5' '5.6' '8032.84' '3697.7' '92.7'
 '3.918944099378882'])
row450 = np.array(['156.4' '128.1' '5223.8' '5.5' '5.6' '8065.696' '3709.6' '89.4'
 '3.918944099378882'])
row451 = np.array(['156.7' '128' '5229.8' '5.5' '5.3' '8098.552' '3722.5' '92.4'
 '3.918944099378882'])
row452 = np.array(['157' '128' '5251.9' '5.5' '5.5' '8131.408' '3737.1' '94.7'
 '3.918944099378882'])
row453 = np.array(['157.2' '128.3' '5275' '5.5' '5.1' '8174.19566666666' '3744' '95.3'
 '3.918944099378882'])
row454 = np.array(['157.7' '128.2' '5296.6' '5.5' '5.2' '8216.98333333333' '3753.4' '94.7'
 '3.918944099378882'])
row455 = np.array(['158.2' '128' '5328.5' '5.5' '5.2' '8259.771' '3772.8' '96.5'
 '3.918944099378882'])
row456 = np.array(['158.7' '128.2' '5351.2' '5.5' '5.4' '8294.06566666666' '3795.1' '99.2'
 '3.918944099378882'])
row457 = np.array(['159.1' '129.1' '5378.6' '5.5' '5.4' '8328.36033333333' '3818.6' '96.9'
 '3.918944099378882'])
row458 = np.array(['159.4' '129.7' '5411.1' '5.5' '5.3' '8362.655' '3834.6' '97.4'
 '3.918944099378882'])
row459 = np.array(['159.7' '128.5' '5434' '5.5' '5.2' '8414.71166666666' '3846.3' '99.7'
 '3.918944099378882'])
row460 = np.array(['159.8' '127.3' '5454.2' '5.5' '5.2' '8466.76833333333' '3861.2' '100'
 '4.9'])
row461 = np.array(['159.9' '127' '5459.3' '5.5' '5.1' '8518.825' '3877' '101.4' '5'])
row462 = np.array(['159.9' '127.4' '5460.2' '5.5' '4.9' '8566.82433333333' '3889.2' '103.2'
 '4.9'])
row463 = np.array(['160.2' '127.2' '5494.2' '5.5' '5' '8614.82366666666' '3906' '104.5' '5'])
row464 = np.array(['160.4' '126.9' '5548.8' '5.5' '4.9' '8662.823' '3923.9' '107.1' '5.1'])
row465 = np.array(['160.8' '127.2' '5587' '5.5' '4.8' '8697.18433333333' '3957.4' '104.4'
 '5.2'])
row466 = np.array(['161.2' '127.5' '5601.7' '5.5' '4.9' '8731.54566666666' '3973.1' '106'
 '5.1'])
row467 = np.array(['161.5' '127.8' '5637.7' '5.5' '4.7' '8765.907' '3992.3' '105.6' '5'])
row468 = np.array(['161.7' '127.9' '5661.1' '5.5' '4.6' '8799.43133333333' '4014.8' '107.2'
 '5.1'])
row469 = np.array(['161.8' '126.8' '5692.1' '5.5' '4.7' '8832.95566666666' '4032.9' '102.1'
 '5.1'])
row470 = np.array(['162' '125.4' '5689.9' '5.5' '4.6' '8866.48' '4056.2' '106.6' '5.1'])
row471 = np.array(['162' '125' '5723.8' '5.5' '4.6' '8900.88633333333' '4088.9' '110.4' '5'])
row472 = np.array(['162' '124.7' '5750.3' '5.5' '4.7' '8935.29266666666' '4114.3' '106.5'
 '4.9'])
row473 = np.array(['162.2' '124.9' '5788.1' '5.5' '4.3' '8969.699' '4140.2' '108.7' '5.2'])
row474 = np.array(['162.6' '125.1' '5837.9' '5.5' '4.4' '9020.165' '4164.4' '106.5' '5.4'])
row475 = np.array(['162.8' '124.8' '5871.7' '5.5' '4.5' '9070.631' '4184.1' '105.6' '5.8'])
row476 = np.array(['163.2' '124.9' '5890' '5.5' '4.5' '9121.097' '4203.8' '105.2' '5.8'])
row477 = np.array(['163.4' '124.2' '5925' '5.5' '4.5' '9178.72833333333' '4228.7' '104.4'
 '5.9'])
row478 = np.array(['163.5' '123.8' '5965.6' '5.5' '4.6' '9236.35966666666' '4267.6' '100.9'
 '5.5'])
row479 = np.array(['163.9' '124' '5998.8' '5.5' '4.5' '9293.991' '4307.7' '97.4' '5.4'])
row480 = np.array(['164.1' '123.6' '6015.4' '5.5' '4.4' '9333.22133333333' '4346.4' '102.7'
 '5.4'])
row481 = np.array(['164.4' '122.8' '6070.5' '5.5' '4.4' '9372.45166666666' '4375.2' '100.5'
 '5.5'])
row482 = np.array(['164.7' '122.9' '6073.9' '5.5' '4.3' '9411.682' '4402.6' '103.9' '5.4'])
row483 = np.array(['164.7' '122.3' '6099.2' '5.5' '4.4' '9449.858' '4425.3' '108.1' '5.4'])
row484 = np.array(['164.8' '122.6' '6133' '5.5' '4.2' '9488.034' '4432.1' '105.7' '5.5'])
row485 = np.array(['165.9' '123.6' '6199.5' '5.5' '4.3' '9526.21' '4460.7' '104.6' '5.6'])
row486 = np.array(['166' '124.7' '6232.1' '5.5' '4.2' '9579.68199999999' '4485.3' '106.8'
 '5.6'])
row487 = np.array(['166' '125.2' '6260.3' '5.5' '4.3' '9633.154' '4507.2' '107.3' '5.4'])
row488 = np.array(['166.7' '125.7' '6287.6' '5.5' '4.3' '9686.626' '4534.5' '106' '5.5'])
row489 = np.array(['167.1' '126.9' '6331.9' '5.5' '4.2' '9757.807' '4551.7' '104.5' '5.3'])
row490 = np.array(['167.8' '128' '6386.5' '5.5' '4.2' '9828.988' '4567.7' '107.2' '5.3'])
row491 = np.array(['168.1' '127.7' '6411.4' '5.5' '4.1' '9900.169' '4591.5' '103.2' '5.4'])
row492 = np.array(['168.4' '128.3' '6448.7' '5.5' '4.1' '9934.17233333333' '4610.5' '107.2'
 '5.4'])
row493 = np.array(['168.8' '127.8' '6541' '5.5' '4' '9968.17566666666' '4638' '105.4' '5.3'])
row494 = np.array(['169.3' '128.3' '6542.9' '5.5' '4' '10002.179' '4666.2' '112' '5.1'])
row495 = np.array(['170' '129.8' '6625.3' '5.5' '4.1' '10084.026' '4679.4' '111.3' '5.1'])
row496 = np.array(['171' '130.8' '6686.5' '5.5' '4' '10165.873' '4710.2' '107.1' '5'])
row497 = np.array(['170.9' '130.7' '6679.1' '5.5' '3.8' '10247.72' '4766.1' '109.2' '5.3'])
row498 = np.array(['171.2' '131.6' '6709.7' '5.5' '4' '10271.2016666666' '4753.9' '110.7'
 '5.2'])
row499 = np.array(['172.2' '133.8' '6746.9' '5.5' '4' '10294.6833333333' '4771.8' '106.4'
 '5.5'])
row500 = np.array(['172.7' '133.7' '6768.5' '5.5' '4' '10318.165' '4789.4' '108.3' '5.5'])
row501 = np.array(['172.7' '132.9' '6802.8' '5.5' '4.1' '10357.358' '4817.5' '107.3' '5.7'])
row502 = np.array(['173.6' '134.7' '6888.6' '5.5' '3.9' '10396.551' '4853.2' '106.8' '5.7'])
row503 = np.array(['173.9' '135.4' '6893.8' '5.5' '3.9' '10435.744' '4869.2' '105.8' '5.7'])
row504 = np.array(['174.2' '135' '6909.8' '5.5' '3.9' '10447.2396666666' '4880.3' '107.6'
 '5.9'])
row505 = np.array(['174.6' '136.2' '6952.2' '5.5' '3.9' '10458.7353333333' '4925' '98.4'
 '5.8'])
row506 = np.array(['175.6' '140' '6987.4' '5.5' '4.2' '10470.231' '4975.7' '94.7' '5.6'])
row507 = np.array(['176' '137.4' '7001.8' '5.5' '4.2' '10513.154' '5014.1' '90.6' '5.5'])
row508 = np.array(['176.1' '135.9' '6996.7' '5.5' '4.3' '10556.077' '5072' '91.5' '5.5'])
row509 = np.array(['176.4' '136.4' '7004.2' '5.5' '4.4' '10599' '5135.9' '88.4' '5.6'])
row510 = np.array(['177.3' '136.8' '7052.8' '5.5' '4.3' '10598.6733333333' '5133' '92' '5.4'])
row511 = np.array(['177.7' '135.5' '7069.7' '5.5' '4.5' '10598.3466666666' '5173.5' '92.6'
 '5.5'])
row512 = np.array(['177.4' '133.4' '7082.3' '5.5' '4.6' '10598.02' '5203.4' '92.4' '5.5'])
row513 = np.array(['177.4' '133.4' '7121.7' '5.5' '4.9' '10618.835' '5237.2' '91.5' '5.5'])
row514 = np.array(['178.1' '133.3' '7007' '5.5' '5' '10639.65' '5348.4' '81.8' '5.3'])
row515 = np.array(['177.6' '130.3' '7212.9' '5.5' '5.3' '10660.465' '5337.1' '82.7' '5.1'])
row516 = np.array(['177.5' '129.8' '7182.3' '5.5' '5.5' '10701.4766666666' '5380.8' '83.9'
 '5'])
row517 = np.array(['177.4' '128.1' '7166.7' '5.5' '5.7' '10742.4883333333' '5433.8' '88.8'
 '4.9'])
row518 = np.array(['177.7' '128.5' '7184.6' '5.5' '5.7' '10783.5' '5454.1' '93' '4.9'])
row519 = np.array(['178' '128.4' '7225.2' '5.5' '5.7' '10818.1533333333' '5483.4' '90.7'
 '4.7'])
row520 = np.array(['178.5' '129.8' '7243.4' '5.5' '5.7' '10852.8066666666' '5495.2' '95.7'
 '4.5'])
row521 = np.array(['179.3' '130.8' '7312.5' '5.5' '5.9' '10887.46' '5495.4' '93' '4.3'])
row522 = np.array(['179.5' '130.8' '7288.9' '5.5' '5.8' '10919.6533333333' '5521.5' '96.9'
 '4.4'])
row523 = np.array(['179.6' '130.9' '7322.5' '5.5' '5.8' '10951.8466666666' '5546.5' '92.4'
 '4.5'])
row524 = np.array(['180' '131.2' '7387.3' '5.5' '5.8' '10984.04' '5589.1' '88.1' '4.3'])
row525 = np.array(['180.5' '131.5' '7412.6' '5.5' '5.7' '11009.8376666666' '5631.6' '87.6'
 '4.3'])
row526 = np.array(['180.8' '132.3' '7391.5' '5.5' '5.7' '11035.6353333333' '5656' '86.1'
 '4.1'])
row527 = np.array(['181.2' '133.2' '7435.2' '5.5' '5.7' '11061.433' '5700.4' '80.6' '4'])
row528 = np.array(['181.5' '133.1' '7463.8' '5.5' '5.9' '11098.9983333333' '5750.6' '84.2'
 '3.5'])
row529 = np.array(['181.8' '132.9' '7519.9' '5.5' '6' '11136.5636666666' '5772' '86.7' '3.5'])
row530 = np.array(['182.6' '135.3' '7541.3' '1.24' '5.8' '11174.129' '5804.6' '82.4' '3.7'])
row531 = np.array(['183.6' '137.6' '7548.6' '1.26' '5.9' '11220.3413333333' '5840.7' '79.9'
 '3.9'])
row532 = np.array(['183.9' '141.2' '7611.5' '1.25' '5.9' '11266.5536666666' '5861.4' '77.6'
 '3.8'])
row533 = np.array(['183.2' '136.8' '7634.5' '1.26' '6' '11312.766' '5898.8' '86' '3.7'])
row534 = np.array(['182.9' '136.7' '7650.3' '1.26' '6.1' '11397.4003333333' '5959.3' '92.1'
 '3.7'])
row535 = np.array(['183.1' '138' '7699.6' '1.22' '6.3' '11482.0346666666' '5996' '89.7'
 '3.8'])
row536 = np.array(['183.7' '137.7' '7757' '1.01' '6.2' '11566.669' '6042.7' '90.9' '3.7'])
row537 = np.array(['184.5' '138' '7852.1' '1.03' '6.1' '11635.1906666666' '6100.8' '89.3'
 '3.6'])
row538 = np.array(['185.1' '138.5' '7853.7' '1.01' '6.1' '11703.7123333333' '6072.8' '87.7'
 '3.5'])
row539 = np.array(['184.9' '139.3' '7867.4' '1.01' '6' '11772.234' '6063.6' '89.6' '3.5'])
row540 = np.array(['185' '138.9' '7922.6' '1' '5.8' '11822.6383333333' '6069.1' '93.7' '3.3'])
row541 = np.array(['185.5' '139.5' '7950.4' '0.98' '5.7' '11873.0426666666' '6067.3' '92.6'
 '3.3'])
row542 = np.array(['186.3' '141.4' '8007.1' '1' '5.7' '11923.447' '6075.5' '103.8' '3.3'])
row543 = np.array(['186.7' '142.1' '8040.4' '1.01' '5.6' '11986.5696666666' '6114.3' '94.4'
 '3.5'])
row544 = np.array(['187.1' '143.1' '8098.8' '1' '5.8' '12049.6923333333' '6150.1' '95.8'
 '3.4'])
row545 = np.array(['187.4' '144.8' '8107.2' '1' '5.6' '12112.815' '6191.2' '94.2' '3.3'])
row546 = np.array(['188.2' '146.8' '8176.5' '1' '5.6' '12176.979' '6268.1' '90.2' '3.3'])
row547 = np.array(['188.9' '147.2' '8157.6' '1.03' '5.6' '12241.143' '6270.5' '95.6' '3.3'])
row548 = np.array(['189.1' '147.4' '8236.9' '1.26' '5.5' '12305.307' '6284.3' '96.7' '3.5'])
row549 = np.array(['189.2' '148' '8271.6' '1.43' '5.4' '12379.276' '6310.6' '95.9' '3.5'])
row550 = np.array(['189.8' '147.7' '8341.5' '1.61' '5.4' '12453.245' '6345.3' '94.2' '3.8'])
row551 = np.array(['190.8' '150' '8397.1' '1.76' '5.5' '12527.214' '6373.3' '91.7' '3.7'])
row552 = np.array(['191.7' '151.4' '8444.5' '1.93' '5.4' '12607.238' '6399.8' '92.8' '3.7'])
row553 = np.array(['191.7' '150.2' '8504.4' '2.16' '5.4' '12687.262' '6418.3' '97.1' '3.3'])
row554 = np.array(['191.6' '150.9' '8497.7' '2.28' '5.3' '12767.286' '6424.5' '95.5' '3.5'])
row555 = np.array(['192.4' '151.6' '8559.1' '2.5' '5.4' '12819.076' '6432.8' '94.1' '3.4'])
row556 = np.array(['193.1' '153.7' '8598.4' '2.63' '5.2' '12870.866' '6441.9' '92.6' '3.6'])
row557 = np.array(['193.7' '155' '8678.4' '2.79' '5.2' '12922.656' '6455.9' '87.7' '3.5'])
row558 = np.array(['193.6' '154.3' '8671.6' '3' '5.1' '12995.9846666666' '6473.3' '86.9'
 '3.6'])
row559 = np.array(['193.7' '154.3' '8753.4' '3.04' '5' '13069.3133333333' '6505.8' '96'
 '3.7'])
row560 = np.array(['194.9' '156.3' '8853.8' '3.26' '5' '13142.642' '6537.4' '96.5' '3.9'])
row561 = np.array(['196.1' '157.6' '8850.1' '3.5' '4.9' '13203.1626666666' '6570.2' '89.1'
 '4'])
row562 = np.array(['198.8' '162.2' '8900.4' '3.62' '5' '13263.6833333333' '6604.3' '76.9'
 '3.9'])
row563 = np.array(['199.1' '166.2' '8938.5' '3.78' '5' '13324.204' '6638.6' '74.2' '4'])
row564 = np.array(['198.1' '163.7' '8946.2' '4' '5' '13415.856' '6655' '81.6' '4.2'])
row565 = np.array(['198.1' '163' '8981.1' '4.16' '4.9' '13507.508' '6681.9' '91.5' '4.3'])
row566 = np.array(['199.3' '164.3' '9071.6' '4.29' '4.7' '13599.16' '6724.3' '91.2' '4.2'])
row567 = np.array(['199.4' '161.8' '9096' '4.49' '4.8' '13650.5813333333' '6748.6' '86.7'
 '3.9'])
row568 = np.array(['199.7' '162.2' '9132.9' '4.59' '4.7' '13702.0026666666' '6762.9' '88.9'
 '4'])
row569 = np.array(['200.7' '164.3' '9191.6' '4.79' '4.7' '13753.424' '6800.1' '87.4' '3.9'])
row570 = np.array(['201.3' '165.8' '9231.8' '4.94' '4.6' '13792.3453333333' '6806.9' '79.1'
 '3.9'])
row571 = np.array(['201.8' '166.1' '9259.6' '4.99' '4.6' '13831.2666666666' '6844.9' '84.9'
 '3.8'])
row572 = np.array(['202.9' '166.8' '9343.8' '5.24' '4.7' '13870.188' '6886.3' '84.7' '3.8'])
row573 = np.array(['203.8' '167.9' '9342.2' '5.25' '4.7' '13926.6453333333' '6917.1' '82'
 '4'])
row574 = np.array(['202.8' '165.4' '9375.4' '5.25' '4.5' '13983.1026666666' '6944.2' '85.4'
 '4'])
row575 = np.array(['201.9' '162.2' '9393.6' '5.25' '4.4' '14039.56' '6993.3' '93.6' '4'])
row576 = np.array(['202' '164.6' '9400.2' '5.25' '4.5' '14098.257' '7028.4' '92.1' '4.2'])
row577 = np.array(['203.1' '165.6' '9488.3' '5.24' '4.4' '14156.954' '7071.6' '91.7' '4.2'])
row578 = np.array(['203.437' '164' '9538.7' '5.25' '4.6' '14215.651' '7109.6' '96.9' '4.4'])
row579 = np.array(['204.226' '166.8' '9566' '5.26' '4.5' '14277.7946666666' '7125.3' '91.3'
 '4.2'])
row580 = np.array(['205.288' '169.3' '9611.7' '5.26' '4.4' '14339.9383333333' '7159.1'
 '88.4' '4.5'])
row581 = np.array(['205.904' '171.4' '9643.6' '5.25' '4.5' '14402.082' '7231.3' '87.1' '4.4'])
row582 = np.array(['206.755' '173.3' '9685.8' '5.25' '4.4' '14456.0936666666' '7245.4'
 '88.3' '4.4'])
row583 = np.array(['207.234' '173.8' '9706.8' '5.25' '4.6' '14510.1053333333' '7278.6'
 '85.3' '4.1'])
row584 = np.array(['207.603' '175.1' '9751.1' '5.26' '4.7' '14564.117' '7309' '90.4' '4.4'])
row585 = np.array(['207.667' '172.4' '9798.9' '5.02' '4.6' '14614.4306666666' '7385.1'
 '83.4' '4.6'])
row586 = np.array(['208.547' '173.5' '9845.1' '4.94' '4.7' '14664.7443333333' '7403.2'
 '83.4' '4.8'])
row587 = np.array(['209.19' '174.7' '9882.7' '4.76' '4.7' '14715.058' '7417.2' '80.9' '4.6'])
row588 = np.array(['210.834' '179' '9955.9' '4.49' '4.7' '14712.218' '7441.8' '76.1' '4.6'])
row589 = np.array(['211.445' '178.6' '9972.8' '4.24' '5' '14709.378' '7471.6' '75.5' '4.4'])
row590 = np.array(['212.174' '181' '9996.4' '3.94' '5' '14706.538' '7505.5' '78.4' '4.2'])
row591 = np.array(['212.687' '182.7' '9981.7' '2.98' '4.9' '14759.5923333333' '7590.6'
 '70.8' '4.1'])
row592 = np.array(['213.448' '187.9' '10035.3' '2.61' '5.1' '14812.6466666666' '7656.2'
 '69.5' '4.1'])
row593 = np.array(['213.942' '190.9' '10070.3' '2.28' '5' '14865.701' '7699.2' '62.6' '4.3'])
row594 = np.array(['215.208' '196.6' '10132.3' '1.98' '5.4' '14876.8003333333' '7711.2'
 '59.8' '4.4'])
row595 = np.array(['217.463' '200.5' '10187.1' '2' '5.6' '14887.8996666666' '7728.9' '56.4'
 '4.4'])
row596 = np.array(['219.016' '205.5' '10185.1' '2.01' '5.8' '14898.999' '7775.4' '61.2'
 '4.3'])
row597 = np.array(['218.69' '199' '10175.7' '2' '6.1' '14802.069' '7790.2' '63' '4.1'])
row598 = np.array(['218.877' '196.9' '10116.4' '1.81' '6.1' '14705.139' '7859.5' '70.3' '4'])
row599 = np.array(['216.995' '186.4' '10034.1' '0.97' '6.5' '14608.209' '7965.3' '57.6'
 '3.9'])
row600 = np.array(['213.153' '176.8' '9885.2' '0.39' '6.8' '14549.1066666666' '8015.8'
 '55.3' '3.8'])
row601 = np.array(['211.398' '170.9' '9801.5' '0.16' '7.3' '14490.0043333333' '8192.1'
 '60.1' '3.7'])
row602 = np.array(['211.933' '171.2' '9847.2' '0.15' '7.8' '14430.902' '8273.7' '61.2' '3.5'])
row603 = np.array(['212.705' '169.3' '9824.5' '0.22' '8.3' '14414.3466666666' '8303.1'
 '56.3' '3.3'])
row604 = np.array(['212.495' '168.1' '9773.2' '0.18' '8.7' '14397.7913333333' '8369.3'
 '57.3' '3.2'])
row605 = np.array(['212.709' '169.1' '9772.5' '0.15' '9' '14381.236' '8372.9' '65.1' '3.1'])
row606 = np.array(['213.022' '170.8' '9791.6' '0.18' '9.4' '14403.7846666666' '8430.7'
 '68.7' '3.2'])
row607 = np.array(['214.79' '174.1' '9852.4' '0.21' '9.5' '14426.3333333333' '8440.5' '70.8'
 '3'])
row608 = np.array(['214.726' '172.5' '9886.3' '0.16' '9.5' '14448.882' '8445.1' '66' '2.9'])
row609 = np.array(['215.445' '175' '10004.1' '0.16' '9.6' '14516.3376666666' '8445' '65.7'
 '2.2'])
row610 = np.array(['215.861' '174.1' '9927.8' '0.15' '9.8' '14583.7933333333' '8444.2'
 '73.5' '2.2'])
row611 = np.array(['216.509' '175.2' '9976.7' '0.12' '10' '14651.249' '8471.1' '70.6' '2.1'])
row612 = np.array(['217.234' '177.4' '9985.7' '0.12' '9.9' '14689.036' '8500.8' '67.4' '2.4'])
row613 = np.array(['217.347' '178.1' '10052.6' '0.12' '9.9' '14726.823' '8496' '72.5' '1.9'])
row614 = np.array(['217.488' '181.9' '10056.1' '0.11' '9.8' '14764.61' '8458.1' '74.4' '1.6'])
row615 = np.array(['217.281' '181' '10093.4' '0.13' '9.8' '14836.471' '8507.4' '73.6' '1.7'])
row616 = np.array(['217.353' '183.3' '10156' '0.16' '9.9' '14908.332' '8504.5' '73.6' '2'])
row617 = np.array(['217.403' '184.4' '10182.3' '0.2' '9.9' '14980.193' '8535.2' '72.2' '2'])
row618 = np.array(['217.29' '184.8' '10210.8' '0.2' '9.6' '15033.9976666666' '8589.9' '73.6'
 '1.6'])
row619 = np.array(['217.199' '183.5' '10231.3' '0.18' '9.4' '15087.8023333333' '8609' '76'
 '1.7'])
row620 = np.array(['217.605' '184.1' '10268.1' '0.18' '9.4' '15141.607' '8618.8' '67.8'
 '1.8'])
row621 = np.array(['217.923' '184.9' '10307.1' '0.19' '9.5' '15197.5626666666' '8669.1'
 '68.9' '2.1'])
row622 = np.array(['218.275' '184.9' '10327.1' '0.19' '9.5' '15253.5183333333' '8700.1'
 '68.2' '1.9'])
row623 = np.array(['219.035' '186.6' '10386.4' '0.19' '9.4' '15309.474' '8749.4' '67.7'
 '1.7'])
row624 = np.array(['219.59' '187.7' '10433.6' '0.19' '9.8' '15323.4653333333' '8770' '71.6'
 '1.6'])
row625 = np.array(['220.472' '189.7' '10471' '0.18' '9.3' '15337.4566666666' '8801.8' '74.5'
 '1.6'])
row626 = np.array(['221.187' '192.7' '10514.3' '0.17' '9.1' '15351.448' '8823.1' '74.2'
 '1.8'])
row627 = np.array(['221.898' '195.8' '10540.6' '0.16' '9' '15420.145' '8886.9' '77.5' '1.8'])
row628 = np.array(['223.046' '199.2' '10619.7' '0.14' '9' '15488.842' '8943.5' '67.5' '1.9'])
row629 = np.array(['224.093' '203.1' '10652.1' '0.1' '9.1' '15557.539' '9004.9' '69.8' '1.9'])
row630 = np.array(['224.806' '204.1' '10672.2' '0.09' '9' '15587.586' '9075.5' '74.3' '1.9'])
row631 = np.array(['224.806' '203.9' '10694.8' '0.09' '9.1' '15617.633' '9151' '71.5' '1.9'])
row632 = np.array(['225.395' '204.6' '10731.6' '0.07' '9' '15647.68' '9316.6' '63.7' '1.9'])
row633 = np.array(['226.106' '203.2' '10750.3' '0.1' '9' '15712.5396666666' '9507.6' '55.8'
 '1.9'])
row634 = np.array(['226.597' '203.7' '10783.2' '0.08' '9' '15777.3993333333' '9528.3' '59.5'
 '1.9'])
row635 = np.array(['226.75' '201.1' '10802.9' '0.07' '8.8' '15842.259' '9562.1' '60.8' '2'])
row636 = np.array(['227.169' '201.4' '10806.8' '0.08' '8.6' '15917.7743333333' '9612.6'
 '63.7' '2.1'])
row637 = np.array(['227.223' '199.8' '10817.8' '0.07' '8.5' '15993.2896666666' '9660.1'
 '69.9' '2.1'])
row638 = np.array(['227.842' '200.7' '10896.8' '0.08' '8.3' '16068.805' '9733.3' '75' '2.1'])
row639 = np.array(['228.329' '201.6' '10987.2' '0.1' '8.3' '16114.9083333333' '9785.7'
 '75.3' '2'])
row640 = np.array(['228.807' '204.2' '10993.9' '0.13' '8.2' '16161.0116666666' '9830.6'
 '76.2' '2.1'])
row641 = np.array(['229.187' '203.7' '11018.5' '0.14' '8.2' '16207.115' '9884.6' '76.4'
 '2.1'])
row642 = np.array(['228.713' '201.9' '11006.8' '0.16' '8.2' '16244.5903333333' '9928.4'
 '79.3' '2'])
row643 = np.array(['228.524' '199.8' '10989.8' '0.16' '8.2' '16282.0656666666' '9999.3'
 '73.2' '2.2'])
row644 = np.array(['228.59' '200.1' '11016.8' '0.16' '8.2' '16319.541' '10051.8' '72.3'
 '2.2'])
row645 = np.array(['229.918' '202.7' '11056' '0.13' '8.1' '16353.167' '10121.3' '74.3' '2'])
row646 = np.array(['231.015' '204.4' '11105.3' '0.14' '7.8' '16386.793' '10200.8' '78.3' '2'])
row647 = np.array(['231.638' '203.5' '11137.4' '0.16' '7.8' '16420.419' '10267.3' '82.6'
 '2.1'])
row648 = np.array(['231.249' '201.8' '11178.4' '0.16' '7.7' '16496.3423333333' '10337.6'
 '82.7' '2.4'])
row649 = np.array(['231.221' '201.5' '11181.2' '0.16' '7.9' '16572.2656666666' '10459.7'
 '72.9' '2.4'])
row650 = np.array(['231.679' '202.5' '11252.4' '0.14' '8' '16648.189' '10482.9' '73.8' '2.2'])
row651 = np.array(['232.937' '204.3' '11290.5' '0.15' '7.7' '16675.0216666666' '10501.3'
 '77.6' '2.2'])
row652 = np.array(['232.282' '204' '11290.1' '0.14' '7.5' '16701.8543333333' '10558.3'
 '78.6' '2.3'])
row653 = np.array(['231.797' '203.5' '11281.1' '0.15' '7.6' '16728.687' '10586.3' '76.4'
 '2.3'])
row654 = np.array(['231.893' '204.1' '11321.6' '0.11' '7.5' '16803.7373333333' '10621'
 '84.5' '2.1'])
row655 = np.array(['232.445' '204.3' '11344.4' '0.09' '7.5' '16878.7876666666' '10678.7'
 '84.1' '2'])
row656 = np.array(['232.9' '204.4' '11372.6' '0.09' '7.3' '16953.838' '10718.4' '85.1' '2.2'])
row657 = np.array(['233.456' '204.2' '11406.6' '0.08' '7.2' '17033.2316666666' '10776.6'
 '82.1' '2.3'])
row658 = np.array(['233.544' '203.9' '11445.9' '0.08' '7.2' '17112.6253333333' '10837.2'
 '77.5' '2.3'])
row659 = np.array(['233.669' '202.5' '11498' '0.09' '7.2' '17192.019' '10961.6' '73.2' '2.2'])
row660 = np.array(['234.1' '201.2' '11562.5' '0.08' '6.9' '17193.9253333333' '10969.7'
 '75.1' '2.1'])
row661 = np.array(['234.719' '202' '11593.2' '0.09' '6.7' '17195.8316666666' '11035' '82.5'
 '2.2'])
row662 = np.array(['235.288' '203.8' '11578.8' '0.07' '6.6' '17197.738' '11080.8' '81.2'
 '2.4'])
row663 = np.array(['235.547' '205.7' '11636.9' '0.07' '6.7' '17304.6613333333' '11178.8'
 '81.6' '2.5'])
row664 = np.array(['236.028' '207' '11722.3' '0.08' '6.7' '17411.5846666666' '11208.1' '80'
 '2.5'])
row665 = np.array(['236.468' '208.3' '11762.3' '0.09' '6.2' '17518.508' '11257.7' '84.1'
 '2.3'])
row666 = np.array(['236.918' '208' '11807.3' '0.09' '6.3' '17613.748' '11321' '81.9' '2.4'])
row667 = np.array(['237.231' '208.3' '11861.7' '0.1' '6.1' '17708.988' '11374.9' '82.5'
 '2.2'])
row668 = np.array(['237.498' '208' '11904.4' '0.09' '6.2' '17804.228' '11429.9' '81.8' '2.2'])
row669 = np.array(['237.46' '207' '11983.7' '0.09' '6.1' '17840.1783333333' '11458.9' '82.5'
 '2.2'])
row670 = np.array(['237.477' '206.4' '11991.4' '0.09' '5.9' '17876.1286666666' '11499.8'
 '84.6' '2.6'])
row671 = np.array(['237.43' '203.4' '12064.7' '0.09' '5.7' '17912.079' '11566' '86.9' '3'])
row672 = np.array(['236.983' '200.9' '12083.9' '0.09' '5.8' '17962.5623333333' '11604.8'
 '88.8' '3.2'])
row673 = np.array(['236.252' '197' '12096.1' '0.12' '5.6' '18013.0456666666' '11684.9'
 '93.6' '3.1'])
row674 = np.array(['234.747' '192' '12066.7' '0.11' '5.7' '18063.529' '11745.6' '98.1' '3.2'])
row675 = np.array(['235.342' '191.1' '12116.6' '0.11' '5.5' '18135.6139999999' '11879'
 '95.4' '3.3'])
row676 = np.array(['235.976' '191.5' '12176.1' '0.11' '5.4' '18207.699' '11886.8' '93' '3.4'])
row677 = np.array(['236.222' '190.9' '12209.1' '0.12' '5.4' '18279.784' '11928.9' '95.9'
 '3.5'])
row678 = np.array(['237.001' '193.4' '12275.4' '0.12' '5.6' '18320.398' '11957.9' '90.7'
 '3.4'])
row679 = np.array(['237.657' '194.8' '12307.9' '0.13' '5.3' '18361.012' '12001.7' '96.1'
 '3.3'])
row680 = np.array(['238.034' '193.9' '12364.9' '0.13' '5.2' '18401.626' '12051.3' '93.1'
 '3.1'])
row681 = np.array(['238.033' '191.9' '12396.2' '0.14' '5.1' '18412.7963333333' '12101.9'
 '91.9' '3.1'])
row682 = np.array(['237.498' '189.1' '12386.4' '0.14' '5' '18423.9666666666' '12160.8'
 '87.2' '2.9'])
row683 = np.array(['237.733' '187.5' '12394.9' '0.12' '5' '18435.137' '12195.9' '90' '2.7'])
row684 = np.array(['238.017' '185.7' '12423.2' '0.12' '5.1' '18465.4023333333' '12284.6'
 '91.3' '3'])
row685 = np.array(['237.761' '183.5' '12452' '0.24' '5' '18495.6676666666' '12346.8' '92.6'
 '3'])
row686 = np.array(['237.652' '182.6' '12478' '0.34' '4.8' '18525.933' '12469.9' '92' '3.4'])
row687 = np.array(['237.336' '181.3' '12554.5' '0.38' '4.9' '18587.856' '12556.7' '91.7'
 '3.6'])
row688 = np.array(['238.08' '182.1' '12537' '0.36' '5' '18649.779' '12616.7' '91' '3.7'])
row689 = np.array(['238.992' '183.2' '12611.5' '0.37' '5.1' '18711.702' '12700.4' '89' '3.7'])
row690 = np.array(['239.557' '185.3' '12652.7' '0.37' '4.8' '18772.0143333333' '12766.2'
 '94.7' '3.7'])
row691 = np.array(['240.222' '187.6' '12731.2' '0.38' '4.9' '18832.3266666666' '12829.4'
 '93.5' '3.9'])
row692 = np.array(['240.101' '187.7' '12756.7' '0.39' '4.8' '18892.639' '12887.7' '90' '3.8'])
row693 = np.array(['240.545' '186.6' '12788.1' '0.4' '4.9' '18958.219' '12972.8' '89.8'
 '3.6'])
row694 = np.array(['241.176' '186.9' '12846.6' '0.4' '5' '19023.799' '13033.6' '91.2' '3.8'])
row695 = np.array(['241.741' '186.7' '12867' '0.4' '4.9' '19089.379' '13100.5' '87.2' '4.1'])
row696 = np.array(['242.026' '186.3' '12893' '0.41' '4.7' '19152.9473333333' '13173.4'
 '93.8' '4.3'])
row697 = np.array(['242.637' '188.2' '13005.9' '0.54' '4.7' '19216.5156666666' '13213.4'
 '98.2' '3.9'])
row698 = np.array(['243.618' '190.7' '13063.7' '0.65' '4.7' '19280.084' '13283.4' '98.5'
 '3.6'])
row699 = np.array(['244.006' '191.6' '13088.4' '0.66' '4.6' '19332.9369999999' '13358.8'
 '96.3' '3.5'])
row700 = np.array(['243.892' '191.5' '13139.9' '0.79' '4.4' '19385.79' '13426.9' '96.9'
 '3.8'])
row701 = np.array(['244.193' '193' '13169.2' '0.9' '4.4' '19438.643' '13484.9' '97' '3.9'])
row702 = np.array(['244.004' '192.8' '13171.9' '0.91' '4.4' '19523.2936666666' '13538.1'
 '97.1' '3.8'])
row703 = np.array(['244.163' '193.6' '13225.2' '1.04' '4.3' '19607.9443333333' '13559.2'
 '95' '3.5'])
row704 = np.array(['244.243' '193.5' '13263.3' '1.15' '4.3' '19692.595' '13618.7' '93.4'
 '3.4'])
row705 = np.array(['245.183' '193.8' '13294.6' '1.16' '4.4' '19807.426' '13673.7' '96.8'
 '3.5'])
row706 = np.array(['246.435' '194.8' '13417.3' '1.15' '4.3' '19922.257' '13717.9' '95.1'
 '3.7'])
row707 = np.array(['246.626' '194.9' '13447.5' '1.15' '4.2' '20037.088' '13770.1' '100.7'
 '3.6'])
row708 = np.array(['247.284' '195.9' '13540.6' '1.16' '4.2' '20134.243' '13799.9' '98.5'
 '3.6'])
row709 = np.array(['247.805' '196.3' '13666.1' '1.3' '4.1' '20231.398' '13857.9' '95.9'
 '3.4'])
row710 = np.array(['248.859' '197.9' '13703.3' '1.41' '4' '20328.553' '13869.7' '95.7' '3.5'])
row711 = np.array(['249.529' '199.3' '13738.7' '1.42' '4.1' '20412.6726666666' '13912.3'
 '99.7' '3.3'])
row712 = np.array(['249.577' '199.3' '13793.2' '1.51' '4' '20496.7923333333' '13970.2'
 '101.4' '3.9'])
row713 = np.array(['250.227' '200.3' '13838.4' '1.69' '4' '20580.912' '13988.8' '98.8' '3.7'])
row714 = np.array(['250.792' '203.2' '13905' '1.7' '3.8' '20653.518' '14047.2' '98' '3.8'])
row715 = np.array(['251.018' '204.2' '13930.4' '1.82' '4' '20726.124' '14103.6' '98.2' '3.5'])
row716 = np.array(['251.214' '204.3' '13974.8' '1.91' '3.8' '20798.73' '14139.2' '97.9'
 '3.7'])
row717 = np.array(['251.663' '203.4' '14014' '1.91' '3.8' '20838.4423333333' '14181.3'
 '96.2' '3.6'])
row718 = np.array(['252.182' '203.6' '14017.8' '1.95' '3.7' '20878.1546666666' '14212.9'
 '100.1' '3.6'])
row719 = np.array(['252.772' '204.6' '14083.1' '2.19' '3.8' '20917.867' '14222.5' '98.6'
 '3.8'])
row720 = np.array(['252.594' '202.3' '14162.9' '2.2' '3.8' '20979.9556666666' '14236.8'
 '97.5' '4'])
row721 = np.array(['252.767' '201' '14051.6' '2.27' '3.9' '21042.0443333333' '14362.7'
 '98.3' '4'])
row722 = np.array(['252.561' '199.1' '14088.4' '2.4' '4' '21104.133' '14430' '91.2' '3.9'])
row723 = np.array(['253.319' '199.2' '14115.5' '2.4' '3.8' '21197.6803333333' '14469.9'
 '93.8' '3.7'])
row724 = np.array(['254.277' '200.8' '14240.1' '2.41' '3.8' '21291.2276666666' '14509.9'
 '98.4' '3.8'])
row725 = np.array(['255.233' '202.1' '14278.3' '2.42' '3.7' '21384.775' '14541' '97.2' '3.9'])
row726 = np.array(['255.296' '201.7' '14340.8' '2.39' '3.6' '21487.944' '14643.2' '100'
 '4.1'])
row727 = np.array(['255.213' '200.3' '14391.2' '2.38' '3.6' '21591.113' '14757.7' '98.2'
 '4.3'])
row728 = np.array(['255.802' '200.7' '14471.8' '2.4' '3.7' '21694.282' '14840.6' '98.4'
 '4.1'])
row729 = np.array(['256.036' '199.2' '14525.7' '2.13' '3.6' '21763.6513333333' '14914.6'
 '89.8' '3.8'])
row730 = np.array(['256.43' '198.4' '14555.6' '2.04' '3.5' '21833.0206666666' '15008.1'
 '93.2' '3.7'])
row731 = np.array(['257.155' '198.6' '14584' '1.83' '3.6' '21902.39' '15140.8' '95.5' '3.7'])
row732 = np.array(['257.879' '199' '14678.6' '1.55' '3.6' '21837.0976666666' '15242.2'
 '96.8' '4.3'])
row733 = np.array(['258.63' '199' '14741.3' '1.55' '3.6' '21771.8053333333' '15320.7' '99.3'
 '4.1'])
row734 = np.array(['258.906' '199.3' '14815.7' '1.55' '3.6' '21706.513' '15396' '99.8' '4.3'])
row735 = np.array(['259.246' '196.7' '14810.7' '1.58' '3.5' '21108.7229999999' '15450.3'
 '101' '3.9'])
row736 = np.array(['258.15' '193.1' '13793' '0.65' '4.4' '20510.933' '15978.7' '89.1' '3.6'])
row737 = np.array(['256.126' '185.5' '12228.3' '0.05' '14.8' '19913.143' '16997.6' '71.8'
 '3.3'])
row738 = np.array(['255.848' '188.6' '13251.4' '0.05' '13.2' '20491.3086666666' '17851.1'
 '72.3' '3.6'])
row739 = np.array(['257.004' '191.2' '14027.1' '0.08' '11' '21069.4743333333' '18131.7'
 '78.1' '3.9'])
row740 = np.array(['258.408' '193' '14285.1' '0.09' '10.2' '21647.64' '18286.3' '72.5' '3.9'])
row741 = np.array(['259.366' '194.3' '14428.4' '0.1' '8.4' '21773.2606666666' '18346' '74.1'
 '3.4'])
row742 = np.array(['259.951' '195.5' '14655' '0.09' '7.8' '21898.8813333333' '18577.3'
 '80.4' '3.3'])
row743 = np.array(['260.249' '196.5' '14702.5' '0.09' '6.8' '22024.502' '18729.1' '81.8'
 '3.6'])
row744 = np.array(['260.895' '198.3' '14675.8' '0.09' '6.7' '22216.3963333333' '18949.3'
 '76.9' '3.9'])
row745 = np.array(['262.005' '200.5' '14801.8' '0.09' '6.7' '22408.2906666666' '19114.6'
 '80.7' '3.7'])
row746 = np.array(['262.518' '204.8' '15047.3' '0.09' '6.4' '22600.185' '19357.4' '79' '3.6'])
row747 = np.array(['263.583' '210.6' '14948.2' '0.08' '6.2' '22830.9106666666' '19600.6'
 '76.8' '3.6'])
row748 = np.array(['264.91' '215' '15657.6' '0.07' '6.1' '23061.6363333333' '19840.8' '84.9'
 '3.7'])
row749 = np.array(['266.752' '217.9' '15854.1' '0.07' '6.1' '23292.362' '20116.7' '88.3'
 '3.4'])
row750 = np.array(['268.452' '224.9' '15890' '0.06' '5.8' '23471.2323333333' '20430.8'
 '82.9' '3.3'])
row751 = np.array(['270.664' '228.9' '16108.5' '0.08' '5.9' '23650.1026666666' '20506.3'
 '85.5' '3.4'])
row752 = np.array(['271.994' '231.85' '16150.8' '0.1' '5.4' '23828.973' '20662.5' '81.2'
 '4.2'])
row753 = np.array(['272.789' '233.415' '16305.6' '0.09' '5.1' '24104.183' '20847.1' '70.3'
 '4.4'])
row754 = np.array(['273.887' '235.678' '16398.9' '0.08' '4.7' '24379.393' '20963.4' '72.8'
 '4.7'])
row755 = np.array(['276.434' '240.465' '16613.8' '0.08' '4.5' '24654.603' '21114.3' '71.7'
 '4.4'])
row756 = np.array(['278.799' '243.287' '16741.6' '0.08' '4.1' '24779.4406666666' '21313.7'
 '67.4' '4.6'])
row757 = np.array(['280.808' '241.338' '16799.2' '0.08' '3.9' '24904.2783333333' '21546.6'
 '70.6' '5'])
row758 = np.array(['282.39' '246.453' '16888.6' '0.08' '4' '25029.116' '21559' '67.2' '5.8'])
row759 = np.array(['284.535' '252.66' '16999.7' '0.08' '3.8' '25200.835' '21566.8' '62.8'
 '6.5'])
row760 = np.array(['287.553' '260.014' '17203.6' '0.2' '3.6' '25372.554' '21693.2' '59.4'
 '6.6'])
row761 = np.array(['288.764' '265.31' '17310.5' '0.33' '3.7' '25544.273' '21671.7' '65.2'
 '6.6'])
row762 = np.array(['291.359' '273.251' '17384.8' '0.77' '3.6' '25694.395' '21659.1' '58.4'
 '6.6'])
row763 = np.array(['294.996' '280.251' '17550' '1.21' '3.6' '25844.517' '21658.8' '50' '7.1'])
row764 = np.array(['294.977' '272.274' '17556.4' '1.68' '3.5' '25994.639' '21695.4' '51.5'
 '7'])
row765 = np.array(['295.209' '269.546' '17692.2' '2.33' '3.6' '26132.5609999999' '21650.6'
 '58.2' '6.9'])
row766 = np.array(['296.341' '267.898' '17804' '2.56' '3.5' '26270.483' '21515.7' '58.6'
 '6.7'])
row767 = np.array(['297.863' '265.061' '17915.1' '3.08' '3.6' '26408.405' '21422.9' '59.9'
 '6.7'])
row768 = np.array(['298.648' '263.157' '17892.5' '3.78' '3.6' '26543.4703333333' '21388.1'
 '56.7' '6.5'])
row769 = np.array(['298.812' '257.897' '17943.6' '4.1' '3.5' '26678.5356666666' '21346.3'
 '59.8' '6.1'])
row770 = np.array(['300.356' '260.227' '18229.6' '4.33' '3.4' '26813.601' '21209' '64.9'
 '5.9'])
row771 = np.array(['301.509' '258.669' '18296.5' '4.57' '3.6' '26896.7379999999' '21086.1'
 '66.9' '6.1'])
row772 = np.array(['301.744' '257.062' '18282.6' '4.65' '3.5' '26979.875' '20861.3' '62'
 '6.5'])
row773 = np.array(['303.032' '256.908' '18363.8' '4.83' '3.4' '27063.012' '20689.3' '63.7'
 '6.4'])
row774 = np.array(['303.365' '253.67' '18407.8' '5.06' '3.7' '27245.384' '20803.2' '59'
 '6.4'])
row775 = np.array(['304.003' '253.86' '18485.4' '5.08' '3.6' '27427.756' '20835.7' '64.2'
 '6'])
row776 = np.array(['304.628' '253.835' '18595.4' '5.12' '3.5' '27610.128' '20841.8' '71.5'
 '5.7'])
row777 = np.array(['306.187' '257.68' '18651.6' '5.33' '3.8' '27721.6276666666' '20798.4'
 '69.4' '5.2'])
row778 = np.array(['307.288' '258.934' '18791.5' '5.33' '3.8' '27833.1273333333' '20723.7'
 '67.9' '5.2'])
row779 = np.array(['307.531' '255.121' '18794.7' '5.33' '3.8' '27944.627' '20690.5' '63.8'
 '5.2'])
row780 = np.array(['308.024' '253.063' '18867.8' '5.33' '3.7' '28091.563' '20730' '61.3'
 '5.2'])
row781 = np.array(['308.742' '249.767' '19001.7' '5.33' '3.7' '28238.499' '20827.2' '69.7'
 '5.2'])


new_features_normalized = scaler.transform(new_features)
new_features_tensor = torch.tensor(new_features_normalized, dtype=torch.float32)

# Normalize and convert feature vector row2
row2_normalized = scaler.transform(row2.reshape(1, -1))
row2_tensor = torch.tensor(row2_normalized, dtype=torch.float32)

# Normalize and convert feature vector row3
row3_normalized = scaler.transform(row3.reshape(1, -1))
row3_tensor = torch.tensor(row3_normalized, dtype=torch.float32)

# Normalize and convert feature vector row4
row4_normalized = scaler.transform(row4.reshape(1, -1))
row4_tensor = torch.tensor(row4_normalized, dtype=torch.float32)

# Normalize and convert feature vector row5
row5_normalized = scaler.transform(row5.reshape(1, -1))
row5_tensor = torch.tensor(row5_normalized, dtype=torch.float32)

# Normalize and convert feature vector row6
row6_normalized = scaler.transform(row6.reshape(1, -1))
row6_tensor = torch.tensor(row6_normalized, dtype=torch.float32)

# Normalize and convert feature vector row7
row7_normalized = scaler.transform(row7.reshape(1, -1))
row7_tensor = torch.tensor(row7_normalized, dtype=torch.float32)

# Normalize and convert feature vector row8
row8_normalized = scaler.transform(row8.reshape(1, -1))
row8_tensor = torch.tensor(row8_normalized, dtype=torch.float32)

# Normalize and convert feature vector row9
row9_normalized = scaler.transform(row9.reshape(1, -1))
row9_tensor = torch.tensor(row9_normalized, dtype=torch.float32)

# Normalize and convert feature vector row10
row10_normalized = scaler.transform(row10.reshape(1, -1))
row10_tensor = torch.tensor(row10_normalized, dtype=torch.float32)

# Normalize and convert feature vector row11
row11_normalized = scaler.transform(row11.reshape(1, -1))
row11_tensor = torch.tensor(row11_normalized, dtype=torch.float32)

# Normalize and convert feature vector row12
row12_normalized = scaler.transform(row12.reshape(1, -1))
row12_tensor = torch.tensor(row12_normalized, dtype=torch.float32)

# Normalize and convert feature vector row13
row13_normalized = scaler.transform(row13.reshape(1, -1))
row13_tensor = torch.tensor(row13_normalized, dtype=torch.float32)

# Normalize and convert feature vector row14
row14_normalized = scaler.transform(row14.reshape(1, -1))
row14_tensor = torch.tensor(row14_normalized, dtype=torch.float32)

# Normalize and convert feature vector row15
row15_normalized = scaler.transform(row15.reshape(1, -1))
row15_tensor = torch.tensor(row15_normalized, dtype=torch.float32)

# Normalize and convert feature vector row16
row16_normalized = scaler.transform(row16.reshape(1, -1))
row16_tensor = torch.tensor(row16_normalized, dtype=torch.float32)

# Normalize and convert feature vector row17
row17_normalized = scaler.transform(row17.reshape(1, -1))
row17_tensor = torch.tensor(row17_normalized, dtype=torch.float32)

# Normalize and convert feature vector row18
row18_normalized = scaler.transform(row18.reshape(1, -1))
row18_tensor = torch.tensor(row18_normalized, dtype=torch.float32)

# Normalize and convert feature vector row19
row19_normalized = scaler.transform(row19.reshape(1, -1))
row19_tensor = torch.tensor(row19_normalized, dtype=torch.float32)

# Normalize and convert feature vector row20
row20_normalized = scaler.transform(row20.reshape(1, -1))
row20_tensor = torch.tensor(row20_normalized, dtype=torch.float32)

# Normalize and convert feature vector row21
row21_normalized = scaler.transform(row21.reshape(1, -1))
row21_tensor = torch.tensor(row21_normalized, dtype=torch.float32)

# Normalize and convert feature vector row22
row22_normalized = scaler.transform(row22.reshape(1, -1))
row22_tensor = torch.tensor(row22_normalized, dtype=torch.float32)

# Normalize and convert feature vector row23
row23_normalized = scaler.transform(row23.reshape(1, -1))
row23_tensor = torch.tensor(row23_normalized, dtype=torch.float32)

# Normalize and convert feature vector row24
row24_normalized = scaler.transform(row24.reshape(1, -1))
row24_tensor = torch.tensor(row24_normalized, dtype=torch.float32)

# Normalize and convert feature vector row25
row25_normalized = scaler.transform(row25.reshape(1, -1))
row25_tensor = torch.tensor(row25_normalized, dtype=torch.float32)

# Normalize and convert feature vector row26
row26_normalized = scaler.transform(row26.reshape(1, -1))
row26_tensor = torch.tensor(row26_normalized, dtype=torch.float32)

# Normalize and convert feature vector row27
row27_normalized = scaler.transform(row27.reshape(1, -1))
row27_tensor = torch.tensor(row27_normalized, dtype=torch.float32)

# Normalize and convert feature vector row28
row28_normalized = scaler.transform(row28.reshape(1, -1))
row28_tensor = torch.tensor(row28_normalized, dtype=torch.float32)

# Normalize and convert feature vector row29
row29_normalized = scaler.transform(row29.reshape(1, -1))
row29_tensor = torch.tensor(row29_normalized, dtype=torch.float32)

# Normalize and convert feature vector row30
row30_normalized = scaler.transform(row30.reshape(1, -1))
row30_tensor = torch.tensor(row30_normalized, dtype=torch.float32)

# Normalize and convert feature vector row31
row31_normalized = scaler.transform(row31.reshape(1, -1))
row31_tensor = torch.tensor(row31_normalized, dtype=torch.float32)

# Normalize and convert feature vector row32
row32_normalized = scaler.transform(row32.reshape(1, -1))
row32_tensor = torch.tensor(row32_normalized, dtype=torch.float32)

# Normalize and convert feature vector row33
row33_normalized = scaler.transform(row33.reshape(1, -1))
row33_tensor = torch.tensor(row33_normalized, dtype=torch.float32)

# Normalize and convert feature vector row34
row34_normalized = scaler.transform(row34.reshape(1, -1))
row34_tensor = torch.tensor(row34_normalized, dtype=torch.float32)

# Normalize and convert feature vector row35
row35_normalized = scaler.transform(row35.reshape(1, -1))
row35_tensor = torch.tensor(row35_normalized, dtype=torch.float32)

# Normalize and convert feature vector row36
row36_normalized = scaler.transform(row36.reshape(1, -1))
row36_tensor = torch.tensor(row36_normalized, dtype=torch.float32)

# Normalize and convert feature vector row37
row37_normalized = scaler.transform(row37.reshape(1, -1))
row37_tensor = torch.tensor(row37_normalized, dtype=torch.float32)

# Normalize and convert feature vector row38
row38_normalized = scaler.transform(row38.reshape(1, -1))
row38_tensor = torch.tensor(row38_normalized, dtype=torch.float32)

# Normalize and convert feature vector row39
row39_normalized = scaler.transform(row39.reshape(1, -1))
row39_tensor = torch.tensor(row39_normalized, dtype=torch.float32)

# Normalize and convert feature vector row40
row40_normalized = scaler.transform(row40.reshape(1, -1))
row40_tensor = torch.tensor(row40_normalized, dtype=torch.float32)

# Normalize and convert feature vector row41
row41_normalized = scaler.transform(row41.reshape(1, -1))
row41_tensor = torch.tensor(row41_normalized, dtype=torch.float32)

# Normalize and convert feature vector row42
row42_normalized = scaler.transform(row42.reshape(1, -1))
row42_tensor = torch.tensor(row42_normalized, dtype=torch.float32)

# Normalize and convert feature vector row43
row43_normalized = scaler.transform(row43.reshape(1, -1))
row43_tensor = torch.tensor(row43_normalized, dtype=torch.float32)

# Normalize and convert feature vector row44
row44_normalized = scaler.transform(row44.reshape(1, -1))
row44_tensor = torch.tensor(row44_normalized, dtype=torch.float32)

# Normalize and convert feature vector row45
row45_normalized = scaler.transform(row45.reshape(1, -1))
row45_tensor = torch.tensor(row45_normalized, dtype=torch.float32)

# Normalize and convert feature vector row46
row46_normalized = scaler.transform(row46.reshape(1, -1))
row46_tensor = torch.tensor(row46_normalized, dtype=torch.float32)

# Normalize and convert feature vector row47
row47_normalized = scaler.transform(row47.reshape(1, -1))
row47_tensor = torch.tensor(row47_normalized, dtype=torch.float32)

# Normalize and convert feature vector row48
row48_normalized = scaler.transform(row48.reshape(1, -1))
row48_tensor = torch.tensor(row48_normalized, dtype=torch.float32)

# Normalize and convert feature vector row49
row49_normalized = scaler.transform(row49.reshape(1, -1))
row49_tensor = torch.tensor(row49_normalized, dtype=torch.float32)

# Normalize and convert feature vector row50
row50_normalized = scaler.transform(row50.reshape(1, -1))
row50_tensor = torch.tensor(row50_normalized, dtype=torch.float32)

# Normalize and convert feature vector row51
row51_normalized = scaler.transform(row51.reshape(1, -1))
row51_tensor = torch.tensor(row51_normalized, dtype=torch.float32)

# Normalize and convert feature vector row52
row52_normalized = scaler.transform(row52.reshape(1, -1))
row52_tensor = torch.tensor(row52_normalized, dtype=torch.float32)

# Normalize and convert feature vector row53
row53_normalized = scaler.transform(row53.reshape(1, -1))
row53_tensor = torch.tensor(row53_normalized, dtype=torch.float32)

# Normalize and convert feature vector row54
row54_normalized = scaler.transform(row54.reshape(1, -1))
row54_tensor = torch.tensor(row54_normalized, dtype=torch.float32)

# Normalize and convert feature vector row55
row55_normalized = scaler.transform(row55.reshape(1, -1))
row55_tensor = torch.tensor(row55_normalized, dtype=torch.float32)

# Normalize and convert feature vector row56
row56_normalized = scaler.transform(row56.reshape(1, -1))
row56_tensor = torch.tensor(row56_normalized, dtype=torch.float32)

# Normalize and convert feature vector row57
row57_normalized = scaler.transform(row57.reshape(1, -1))
row57_tensor = torch.tensor(row57_normalized, dtype=torch.float32)

# Normalize and convert feature vector row58
row58_normalized = scaler.transform(row58.reshape(1, -1))
row58_tensor = torch.tensor(row58_normalized, dtype=torch.float32)

# Normalize and convert feature vector row59
row59_normalized = scaler.transform(row59.reshape(1, -1))
row59_tensor = torch.tensor(row59_normalized, dtype=torch.float32)

# Normalize and convert feature vector row60
row60_normalized = scaler.transform(row60.reshape(1, -1))
row60_tensor = torch.tensor(row60_normalized, dtype=torch.float32)

# Normalize and convert feature vector row61
row61_normalized = scaler.transform(row61.reshape(1, -1))
row61_tensor = torch.tensor(row61_normalized, dtype=torch.float32)

# Normalize and convert feature vector row62
row62_normalized = scaler.transform(row62.reshape(1, -1))
row62_tensor = torch.tensor(row62_normalized, dtype=torch.float32)

# Normalize and convert feature vector row63
row63_normalized = scaler.transform(row63.reshape(1, -1))
row63_tensor = torch.tensor(row63_normalized, dtype=torch.float32)

# Normalize and convert feature vector row64
row64_normalized = scaler.transform(row64.reshape(1, -1))
row64_tensor = torch.tensor(row64_normalized, dtype=torch.float32)

# Normalize and convert feature vector row65
row65_normalized = scaler.transform(row65.reshape(1, -1))
row65_tensor = torch.tensor(row65_normalized, dtype=torch.float32)

# Normalize and convert feature vector row66
row66_normalized = scaler.transform(row66.reshape(1, -1))
row66_tensor = torch.tensor(row66_normalized, dtype=torch.float32)

# Normalize and convert feature vector row67
row67_normalized = scaler.transform(row67.reshape(1, -1))
row67_tensor = torch.tensor(row67_normalized, dtype=torch.float32)

# Normalize and convert feature vector row68
row68_normalized = scaler.transform(row68.reshape(1, -1))
row68_tensor = torch.tensor(row68_normalized, dtype=torch.float32)

# Normalize and convert feature vector row69
row69_normalized = scaler.transform(row69.reshape(1, -1))
row69_tensor = torch.tensor(row69_normalized, dtype=torch.float32)

# Normalize and convert feature vector row70
row70_normalized = scaler.transform(row70.reshape(1, -1))
row70_tensor = torch.tensor(row70_normalized, dtype=torch.float32)

# Normalize and convert feature vector row71
row71_normalized = scaler.transform(row71.reshape(1, -1))
row71_tensor = torch.tensor(row71_normalized, dtype=torch.float32)

# Normalize and convert feature vector row72
row72_normalized = scaler.transform(row72.reshape(1, -1))
row72_tensor = torch.tensor(row72_normalized, dtype=torch.float32)

# Normalize and convert feature vector row73
row73_normalized = scaler.transform(row73.reshape(1, -1))
row73_tensor = torch.tensor(row73_normalized, dtype=torch.float32)

# Normalize and convert feature vector row74
row74_normalized = scaler.transform(row74.reshape(1, -1))
row74_tensor = torch.tensor(row74_normalized, dtype=torch.float32)

# Normalize and convert feature vector row75
row75_normalized = scaler.transform(row75.reshape(1, -1))
row75_tensor = torch.tensor(row75_normalized, dtype=torch.float32)

# Normalize and convert feature vector row76
row76_normalized = scaler.transform(row76.reshape(1, -1))
row76_tensor = torch.tensor(row76_normalized, dtype=torch.float32)

# Normalize and convert feature vector row77
row77_normalized = scaler.transform(row77.reshape(1, -1))
row77_tensor = torch.tensor(row77_normalized, dtype=torch.float32)

# Normalize and convert feature vector row78
row78_normalized = scaler.transform(row78.reshape(1, -1))
row78_tensor = torch.tensor(row78_normalized, dtype=torch.float32)

# Normalize and convert feature vector row79
row79_normalized = scaler.transform(row79.reshape(1, -1))
row79_tensor = torch.tensor(row79_normalized, dtype=torch.float32)

# Normalize and convert feature vector row80
row80_normalized = scaler.transform(row80.reshape(1, -1))
row80_tensor = torch.tensor(row80_normalized, dtype=torch.float32)

# Normalize and convert feature vector row81
row81_normalized = scaler.transform(row81.reshape(1, -1))
row81_tensor = torch.tensor(row81_normalized, dtype=torch.float32)

# Normalize and convert feature vector row82
row82_normalized = scaler.transform(row82.reshape(1, -1))
row82_tensor = torch.tensor(row82_normalized, dtype=torch.float32)

# Normalize and convert feature vector row83
row83_normalized = scaler.transform(row83.reshape(1, -1))
row83_tensor = torch.tensor(row83_normalized, dtype=torch.float32)

# Normalize and convert feature vector row84
row84_normalized = scaler.transform(row84.reshape(1, -1))
row84_tensor = torch.tensor(row84_normalized, dtype=torch.float32)

# Normalize and convert feature vector row85
row85_normalized = scaler.transform(row85.reshape(1, -1))
row85_tensor = torch.tensor(row85_normalized, dtype=torch.float32)

# Normalize and convert feature vector row86
row86_normalized = scaler.transform(row86.reshape(1, -1))
row86_tensor = torch.tensor(row86_normalized, dtype=torch.float32)

# Normalize and convert feature vector row87
row87_normalized = scaler.transform(row87.reshape(1, -1))
row87_tensor = torch.tensor(row87_normalized, dtype=torch.float32)

# Normalize and convert feature vector row88
row88_normalized = scaler.transform(row88.reshape(1, -1))
row88_tensor = torch.tensor(row88_normalized, dtype=torch.float32)

# Normalize and convert feature vector row89
row89_normalized = scaler.transform(row89.reshape(1, -1))
row89_tensor = torch.tensor(row89_normalized, dtype=torch.float32)

# Normalize and convert feature vector row90
row90_normalized = scaler.transform(row90.reshape(1, -1))
row90_tensor = torch.tensor(row90_normalized, dtype=torch.float32)

# Normalize and convert feature vector row91
row91_normalized = scaler.transform(row91.reshape(1, -1))
row91_tensor = torch.tensor(row91_normalized, dtype=torch.float32)

# Normalize and convert feature vector row92
row92_normalized = scaler.transform(row92.reshape(1, -1))
row92_tensor = torch.tensor(row92_normalized, dtype=torch.float32)

# Normalize and convert feature vector row93
row93_normalized = scaler.transform(row93.reshape(1, -1))
row93_tensor = torch.tensor(row93_normalized, dtype=torch.float32)

# Normalize and convert feature vector row94
row94_normalized = scaler.transform(row94.reshape(1, -1))
row94_tensor = torch.tensor(row94_normalized, dtype=torch.float32)

# Normalize and convert feature vector row95
row95_normalized = scaler.transform(row95.reshape(1, -1))
row95_tensor = torch.tensor(row95_normalized, dtype=torch.float32)

# Normalize and convert feature vector row96
row96_normalized = scaler.transform(row96.reshape(1, -1))
row96_tensor = torch.tensor(row96_normalized, dtype=torch.float32)

# Normalize and convert feature vector row97
row97_normalized = scaler.transform(row97.reshape(1, -1))
row97_tensor = torch.tensor(row97_normalized, dtype=torch.float32)

# Normalize and convert feature vector row98
row98_normalized = scaler.transform(row98.reshape(1, -1))
row98_tensor = torch.tensor(row98_normalized, dtype=torch.float32)

# Normalize and convert feature vector row99
row99_normalized = scaler.transform(row99.reshape(1, -1))
row99_tensor = torch.tensor(row99_normalized, dtype=torch.float32)

# Normalize and convert feature vector row100
row100_normalized = scaler.transform(row100.reshape(1, -1))
row100_tensor = torch.tensor(row100_normalized, dtype=torch.float32)

# Normalize and convert feature vector row101
row101_normalized = scaler.transform(row101.reshape(1, -1))
row101_tensor = torch.tensor(row101_normalized, dtype=torch.float32)

# Normalize and convert feature vector row102
row102_normalized = scaler.transform(row102.reshape(1, -1))
row102_tensor = torch.tensor(row102_normalized, dtype=torch.float32)

# Normalize and convert feature vector row103
row103_normalized = scaler.transform(row103.reshape(1, -1))
row103_tensor = torch.tensor(row103_normalized, dtype=torch.float32)

# Normalize and convert feature vector row104
row104_normalized = scaler.transform(row104.reshape(1, -1))
row104_tensor = torch.tensor(row104_normalized, dtype=torch.float32)

# Normalize and convert feature vector row105
row105_normalized = scaler.transform(row105.reshape(1, -1))
row105_tensor = torch.tensor(row105_normalized, dtype=torch.float32)

# Normalize and convert feature vector row106
row106_normalized = scaler.transform(row106.reshape(1, -1))
row106_tensor = torch.tensor(row106_normalized, dtype=torch.float32)

# Normalize and convert feature vector row107
row107_normalized = scaler.transform(row107.reshape(1, -1))
row107_tensor = torch.tensor(row107_normalized, dtype=torch.float32)

# Normalize and convert feature vector row108
row108_normalized = scaler.transform(row108.reshape(1, -1))
row108_tensor = torch.tensor(row108_normalized, dtype=torch.float32)

# Normalize and convert feature vector row109
row109_normalized = scaler.transform(row109.reshape(1, -1))
row109_tensor = torch.tensor(row109_normalized, dtype=torch.float32)

# Normalize and convert feature vector row110
row110_normalized = scaler.transform(row110.reshape(1, -1))
row110_tensor = torch.tensor(row110_normalized, dtype=torch.float32)

# Normalize and convert feature vector row111
row111_normalized = scaler.transform(row111.reshape(1, -1))
row111_tensor = torch.tensor(row111_normalized, dtype=torch.float32)

# Normalize and convert feature vector row112
row112_normalized = scaler.transform(row112.reshape(1, -1))
row112_tensor = torch.tensor(row112_normalized, dtype=torch.float32)

# Normalize and convert feature vector row113
row113_normalized = scaler.transform(row113.reshape(1, -1))
row113_tensor = torch.tensor(row113_normalized, dtype=torch.float32)

# Normalize and convert feature vector row114
row114_normalized = scaler.transform(row114.reshape(1, -1))
row114_tensor = torch.tensor(row114_normalized, dtype=torch.float32)

# Normalize and convert feature vector row115
row115_normalized = scaler.transform(row115.reshape(1, -1))
row115_tensor = torch.tensor(row115_normalized, dtype=torch.float32)

# Normalize and convert feature vector row116
row116_normalized = scaler.transform(row116.reshape(1, -1))
row116_tensor = torch.tensor(row116_normalized, dtype=torch.float32)

# Normalize and convert feature vector row117
row117_normalized = scaler.transform(row117.reshape(1, -1))
row117_tensor = torch.tensor(row117_normalized, dtype=torch.float32)

# Normalize and convert feature vector row118
row118_normalized = scaler.transform(row118.reshape(1, -1))
row118_tensor = torch.tensor(row118_normalized, dtype=torch.float32)

# Normalize and convert feature vector row119
row119_normalized = scaler.transform(row119.reshape(1, -1))
row119_tensor = torch.tensor(row119_normalized, dtype=torch.float32)

# Normalize and convert feature vector row120
row120_normalized = scaler.transform(row120.reshape(1, -1))
row120_tensor = torch.tensor(row120_normalized, dtype=torch.float32)

# Normalize and convert feature vector row121
row121_normalized = scaler.transform(row121.reshape(1, -1))
row121_tensor = torch.tensor(row121_normalized, dtype=torch.float32)

# Normalize and convert feature vector row122
row122_normalized = scaler.transform(row122.reshape(1, -1))
row122_tensor = torch.tensor(row122_normalized, dtype=torch.float32)

# Normalize and convert feature vector row123
row123_normalized = scaler.transform(row123.reshape(1, -1))
row123_tensor = torch.tensor(row123_normalized, dtype=torch.float32)

# Normalize and convert feature vector row124
row124_normalized = scaler.transform(row124.reshape(1, -1))
row124_tensor = torch.tensor(row124_normalized, dtype=torch.float32)

# Normalize and convert feature vector row125
row125_normalized = scaler.transform(row125.reshape(1, -1))
row125_tensor = torch.tensor(row125_normalized, dtype=torch.float32)

# Normalize and convert feature vector row126
row126_normalized = scaler.transform(row126.reshape(1, -1))
row126_tensor = torch.tensor(row126_normalized, dtype=torch.float32)

# Normalize and convert feature vector row127
row127_normalized = scaler.transform(row127.reshape(1, -1))
row127_tensor = torch.tensor(row127_normalized, dtype=torch.float32)

# Normalize and convert feature vector row128
row128_normalized = scaler.transform(row128.reshape(1, -1))
row128_tensor = torch.tensor(row128_normalized, dtype=torch.float32)

# Normalize and convert feature vector row129
row129_normalized = scaler.transform(row129.reshape(1, -1))
row129_tensor = torch.tensor(row129_normalized, dtype=torch.float32)

# Normalize and convert feature vector row130
row130_normalized = scaler.transform(row130.reshape(1, -1))
row130_tensor = torch.tensor(row130_normalized, dtype=torch.float32)

# Normalize and convert feature vector row131
row131_normalized = scaler.transform(row131.reshape(1, -1))
row131_tensor = torch.tensor(row131_normalized, dtype=torch.float32)

# Normalize and convert feature vector row132
row132_normalized = scaler.transform(row132.reshape(1, -1))
row132_tensor = torch.tensor(row132_normalized, dtype=torch.float32)

# Normalize and convert feature vector row133
row133_normalized = scaler.transform(row133.reshape(1, -1))
row133_tensor = torch.tensor(row133_normalized, dtype=torch.float32)

# Normalize and convert feature vector row134
row134_normalized = scaler.transform(row134.reshape(1, -1))
row134_tensor = torch.tensor(row134_normalized, dtype=torch.float32)

# Normalize and convert feature vector row135
row135_normalized = scaler.transform(row135.reshape(1, -1))
row135_tensor = torch.tensor(row135_normalized, dtype=torch.float32)

# Normalize and convert feature vector row136
row136_normalized = scaler.transform(row136.reshape(1, -1))
row136_tensor = torch.tensor(row136_normalized, dtype=torch.float32)

# Normalize and convert feature vector row137
row137_normalized = scaler.transform(row137.reshape(1, -1))
row137_tensor = torch.tensor(row137_normalized, dtype=torch.float32)

# Normalize and convert feature vector row138
row138_normalized = scaler.transform(row138.reshape(1, -1))
row138_tensor = torch.tensor(row138_normalized, dtype=torch.float32)

# Normalize and convert feature vector row139
row139_normalized = scaler.transform(row139.reshape(1, -1))
row139_tensor = torch.tensor(row139_normalized, dtype=torch.float32)

# Normalize and convert feature vector row140
row140_normalized = scaler.transform(row140.reshape(1, -1))
row140_tensor = torch.tensor(row140_normalized, dtype=torch.float32)

# Normalize and convert feature vector row141
row141_normalized = scaler.transform(row141.reshape(1, -1))
row141_tensor = torch.tensor(row141_normalized, dtype=torch.float32)

# Normalize and convert feature vector row142
row142_normalized = scaler.transform(row142.reshape(1, -1))
row142_tensor = torch.tensor(row142_normalized, dtype=torch.float32)

# Normalize and convert feature vector row143
row143_normalized = scaler.transform(row143.reshape(1, -1))
row143_tensor = torch.tensor(row143_normalized, dtype=torch.float32)

# Normalize and convert feature vector row144
row144_normalized = scaler.transform(row144.reshape(1, -1))
row144_tensor = torch.tensor(row144_normalized, dtype=torch.float32)

# Normalize and convert feature vector row145
row145_normalized = scaler.transform(row145.reshape(1, -1))
row145_tensor = torch.tensor(row145_normalized, dtype=torch.float32)

# Normalize and convert feature vector row146
row146_normalized = scaler.transform(row146.reshape(1, -1))
row146_tensor = torch.tensor(row146_normalized, dtype=torch.float32)

# Normalize and convert feature vector row147
row147_normalized = scaler.transform(row147.reshape(1, -1))
row147_tensor = torch.tensor(row147_normalized, dtype=torch.float32)

# Normalize and convert feature vector row148
row148_normalized = scaler.transform(row148.reshape(1, -1))
row148_tensor = torch.tensor(row148_normalized, dtype=torch.float32)

# Normalize and convert feature vector row149
row149_normalized = scaler.transform(row149.reshape(1, -1))
row149_tensor = torch.tensor(row149_normalized, dtype=torch.float32)

# Normalize and convert feature vector row150
row150_normalized = scaler.transform(row150.reshape(1, -1))
row150_tensor = torch.tensor(row150_normalized, dtype=torch.float32)

# Normalize and convert feature vector row151
row151_normalized = scaler.transform(row151.reshape(1, -1))
row151_tensor = torch.tensor(row151_normalized, dtype=torch.float32)

# Normalize and convert feature vector row152
row152_normalized = scaler.transform(row152.reshape(1, -1))
row152_tensor = torch.tensor(row152_normalized, dtype=torch.float32)

# Normalize and convert feature vector row153
row153_normalized = scaler.transform(row153.reshape(1, -1))
row153_tensor = torch.tensor(row153_normalized, dtype=torch.float32)

# Normalize and convert feature vector row154
row154_normalized = scaler.transform(row154.reshape(1, -1))
row154_tensor = torch.tensor(row154_normalized, dtype=torch.float32)

# Normalize and convert feature vector row155
row155_normalized = scaler.transform(row155.reshape(1, -1))
row155_tensor = torch.tensor(row155_normalized, dtype=torch.float32)

# Normalize and convert feature vector row156
row156_normalized = scaler.transform(row156.reshape(1, -1))
row156_tensor = torch.tensor(row156_normalized, dtype=torch.float32)

# Normalize and convert feature vector row157
row157_normalized = scaler.transform(row157.reshape(1, -1))
row157_tensor = torch.tensor(row157_normalized, dtype=torch.float32)

# Normalize and convert feature vector row158
row158_normalized = scaler.transform(row158.reshape(1, -1))
row158_tensor = torch.tensor(row158_normalized, dtype=torch.float32)

# Normalize and convert feature vector row159
row159_normalized = scaler.transform(row159.reshape(1, -1))
row159_tensor = torch.tensor(row159_normalized, dtype=torch.float32)

# Normalize and convert feature vector row160
row160_normalized = scaler.transform(row160.reshape(1, -1))
row160_tensor = torch.tensor(row160_normalized, dtype=torch.float32)

# Normalize and convert feature vector row161
row161_normalized = scaler.transform(row161.reshape(1, -1))
row161_tensor = torch.tensor(row161_normalized, dtype=torch.float32)

# Normalize and convert feature vector row162
row162_normalized = scaler.transform(row162.reshape(1, -1))
row162_tensor = torch.tensor(row162_normalized, dtype=torch.float32)

# Normalize and convert feature vector row163
row163_normalized = scaler.transform(row163.reshape(1, -1))
row163_tensor = torch.tensor(row163_normalized, dtype=torch.float32)

# Normalize and convert feature vector row164
row164_normalized = scaler.transform(row164.reshape(1, -1))
row164_tensor = torch.tensor(row164_normalized, dtype=torch.float32)

# Normalize and convert feature vector row165
row165_normalized = scaler.transform(row165.reshape(1, -1))
row165_tensor = torch.tensor(row165_normalized, dtype=torch.float32)

# Normalize and convert feature vector row166
row166_normalized = scaler.transform(row166.reshape(1, -1))
row166_tensor = torch.tensor(row166_normalized, dtype=torch.float32)

# Normalize and convert feature vector row167
row167_normalized = scaler.transform(row167.reshape(1, -1))
row167_tensor = torch.tensor(row167_normalized, dtype=torch.float32)

# Normalize and convert feature vector row168
row168_normalized = scaler.transform(row168.reshape(1, -1))
row168_tensor = torch.tensor(row168_normalized, dtype=torch.float32)

# Normalize and convert feature vector row169
row169_normalized = scaler.transform(row169.reshape(1, -1))
row169_tensor = torch.tensor(row169_normalized, dtype=torch.float32)

# Normalize and convert feature vector row170
row170_normalized = scaler.transform(row170.reshape(1, -1))
row170_tensor = torch.tensor(row170_normalized, dtype=torch.float32)

# Normalize and convert feature vector row171
row171_normalized = scaler.transform(row171.reshape(1, -1))
row171_tensor = torch.tensor(row171_normalized, dtype=torch.float32)

# Normalize and convert feature vector row172
row172_normalized = scaler.transform(row172.reshape(1, -1))
row172_tensor = torch.tensor(row172_normalized, dtype=torch.float32)

# Normalize and convert feature vector row173
row173_normalized = scaler.transform(row173.reshape(1, -1))
row173_tensor = torch.tensor(row173_normalized, dtype=torch.float32)

# Normalize and convert feature vector row174
row174_normalized = scaler.transform(row174.reshape(1, -1))
row174_tensor = torch.tensor(row174_normalized, dtype=torch.float32)

# Normalize and convert feature vector row175
row175_normalized = scaler.transform(row175.reshape(1, -1))
row175_tensor = torch.tensor(row175_normalized, dtype=torch.float32)

# Normalize and convert feature vector row176
row176_normalized = scaler.transform(row176.reshape(1, -1))
row176_tensor = torch.tensor(row176_normalized, dtype=torch.float32)

# Normalize and convert feature vector row177
row177_normalized = scaler.transform(row177.reshape(1, -1))
row177_tensor = torch.tensor(row177_normalized, dtype=torch.float32)

# Normalize and convert feature vector row178
row178_normalized = scaler.transform(row178.reshape(1, -1))
row178_tensor = torch.tensor(row178_normalized, dtype=torch.float32)

# Normalize and convert feature vector row179
row179_normalized = scaler.transform(row179.reshape(1, -1))
row179_tensor = torch.tensor(row179_normalized, dtype=torch.float32)

# Normalize and convert feature vector row180
row180_normalized = scaler.transform(row180.reshape(1, -1))
row180_tensor = torch.tensor(row180_normalized, dtype=torch.float32)

# Normalize and convert feature vector row181
row181_normalized = scaler.transform(row181.reshape(1, -1))
row181_tensor = torch.tensor(row181_normalized, dtype=torch.float32)

# Normalize and convert feature vector row182
row182_normalized = scaler.transform(row182.reshape(1, -1))
row182_tensor = torch.tensor(row182_normalized, dtype=torch.float32)

# Normalize and convert feature vector row183
row183_normalized = scaler.transform(row183.reshape(1, -1))
row183_tensor = torch.tensor(row183_normalized, dtype=torch.float32)

# Normalize and convert feature vector row184
row184_normalized = scaler.transform(row184.reshape(1, -1))
row184_tensor = torch.tensor(row184_normalized, dtype=torch.float32)

# Normalize and convert feature vector row185
row185_normalized = scaler.transform(row185.reshape(1, -1))
row185_tensor = torch.tensor(row185_normalized, dtype=torch.float32)

# Normalize and convert feature vector row186
row186_normalized = scaler.transform(row186.reshape(1, -1))
row186_tensor = torch.tensor(row186_normalized, dtype=torch.float32)

# Normalize and convert feature vector row187
row187_normalized = scaler.transform(row187.reshape(1, -1))
row187_tensor = torch.tensor(row187_normalized, dtype=torch.float32)

# Normalize and convert feature vector row188
row188_normalized = scaler.transform(row188.reshape(1, -1))
row188_tensor = torch.tensor(row188_normalized, dtype=torch.float32)

# Normalize and convert feature vector row189
row189_normalized = scaler.transform(row189.reshape(1, -1))
row189_tensor = torch.tensor(row189_normalized, dtype=torch.float32)

# Normalize and convert feature vector row190
row190_normalized = scaler.transform(row190.reshape(1, -1))
row190_tensor = torch.tensor(row190_normalized, dtype=torch.float32)

# Normalize and convert feature vector row191
row191_normalized = scaler.transform(row191.reshape(1, -1))
row191_tensor = torch.tensor(row191_normalized, dtype=torch.float32)

# Normalize and convert feature vector row192
row192_normalized = scaler.transform(row192.reshape(1, -1))
row192_tensor = torch.tensor(row192_normalized, dtype=torch.float32)

# Normalize and convert feature vector row193
row193_normalized = scaler.transform(row193.reshape(1, -1))
row193_tensor = torch.tensor(row193_normalized, dtype=torch.float32)

# Normalize and convert feature vector row194
row194_normalized = scaler.transform(row194.reshape(1, -1))
row194_tensor = torch.tensor(row194_normalized, dtype=torch.float32)

# Normalize and convert feature vector row195
row195_normalized = scaler.transform(row195.reshape(1, -1))
row195_tensor = torch.tensor(row195_normalized, dtype=torch.float32)

# Normalize and convert feature vector row196
row196_normalized = scaler.transform(row196.reshape(1, -1))
row196_tensor = torch.tensor(row196_normalized, dtype=torch.float32)

# Normalize and convert feature vector row197
row197_normalized = scaler.transform(row197.reshape(1, -1))
row197_tensor = torch.tensor(row197_normalized, dtype=torch.float32)

# Normalize and convert feature vector row198
row198_normalized = scaler.transform(row198.reshape(1, -1))
row198_tensor = torch.tensor(row198_normalized, dtype=torch.float32)

# Normalize and convert feature vector row199
row199_normalized = scaler.transform(row199.reshape(1, -1))
row199_tensor = torch.tensor(row199_normalized, dtype=torch.float32)

# Normalize and convert feature vector row200
row200_normalized = scaler.transform(row200.reshape(1, -1))
row200_tensor = torch.tensor(row200_normalized, dtype=torch.float32)

# Normalize and convert feature vector row201
row201_normalized = scaler.transform(row201.reshape(1, -1))
row201_tensor = torch.tensor(row201_normalized, dtype=torch.float32)

# Normalize and convert feature vector row202
row202_normalized = scaler.transform(row202.reshape(1, -1))
row202_tensor = torch.tensor(row202_normalized, dtype=torch.float32)

# Normalize and convert feature vector row203
row203_normalized = scaler.transform(row203.reshape(1, -1))
row203_tensor = torch.tensor(row203_normalized, dtype=torch.float32)

# Normalize and convert feature vector row204
row204_normalized = scaler.transform(row204.reshape(1, -1))
row204_tensor = torch.tensor(row204_normalized, dtype=torch.float32)

# Normalize and convert feature vector row205
row205_normalized = scaler.transform(row205.reshape(1, -1))
row205_tensor = torch.tensor(row205_normalized, dtype=torch.float32)

# Normalize and convert feature vector row206
row206_normalized = scaler.transform(row206.reshape(1, -1))
row206_tensor = torch.tensor(row206_normalized, dtype=torch.float32)

# Normalize and convert feature vector row207
row207_normalized = scaler.transform(row207.reshape(1, -1))
row207_tensor = torch.tensor(row207_normalized, dtype=torch.float32)

# Normalize and convert feature vector row208
row208_normalized = scaler.transform(row208.reshape(1, -1))
row208_tensor = torch.tensor(row208_normalized, dtype=torch.float32)

# Normalize and convert feature vector row209
row209_normalized = scaler.transform(row209.reshape(1, -1))
row209_tensor = torch.tensor(row209_normalized, dtype=torch.float32)

# Normalize and convert feature vector row210
row210_normalized = scaler.transform(row210.reshape(1, -1))
row210_tensor = torch.tensor(row210_normalized, dtype=torch.float32)

# Normalize and convert feature vector row211
row211_normalized = scaler.transform(row211.reshape(1, -1))
row211_tensor = torch.tensor(row211_normalized, dtype=torch.float32)

# Normalize and convert feature vector row212
row212_normalized = scaler.transform(row212.reshape(1, -1))
row212_tensor = torch.tensor(row212_normalized, dtype=torch.float32)

# Normalize and convert feature vector row213
row213_normalized = scaler.transform(row213.reshape(1, -1))
row213_tensor = torch.tensor(row213_normalized, dtype=torch.float32)

# Normalize and convert feature vector row214
row214_normalized = scaler.transform(row214.reshape(1, -1))
row214_tensor = torch.tensor(row214_normalized, dtype=torch.float32)

# Normalize and convert feature vector row215
row215_normalized = scaler.transform(row215.reshape(1, -1))
row215_tensor = torch.tensor(row215_normalized, dtype=torch.float32)

# Normalize and convert feature vector row216
row216_normalized = scaler.transform(row216.reshape(1, -1))
row216_tensor = torch.tensor(row216_normalized, dtype=torch.float32)

# Normalize and convert feature vector row217
row217_normalized = scaler.transform(row217.reshape(1, -1))
row217_tensor = torch.tensor(row217_normalized, dtype=torch.float32)

# Normalize and convert feature vector row218
row218_normalized = scaler.transform(row218.reshape(1, -1))
row218_tensor = torch.tensor(row218_normalized, dtype=torch.float32)

# Normalize and convert feature vector row219
row219_normalized = scaler.transform(row219.reshape(1, -1))
row219_tensor = torch.tensor(row219_normalized, dtype=torch.float32)

# Normalize and convert feature vector row220
row220_normalized = scaler.transform(row220.reshape(1, -1))
row220_tensor = torch.tensor(row220_normalized, dtype=torch.float32)

# Normalize and convert feature vector row221
row221_normalized = scaler.transform(row221.reshape(1, -1))
row221_tensor = torch.tensor(row221_normalized, dtype=torch.float32)

# Normalize and convert feature vector row222
row222_normalized = scaler.transform(row222.reshape(1, -1))
row222_tensor = torch.tensor(row222_normalized, dtype=torch.float32)

# Normalize and convert feature vector row223
row223_normalized = scaler.transform(row223.reshape(1, -1))
row223_tensor = torch.tensor(row223_normalized, dtype=torch.float32)

# Normalize and convert feature vector row224
row224_normalized = scaler.transform(row224.reshape(1, -1))
row224_tensor = torch.tensor(row224_normalized, dtype=torch.float32)

# Normalize and convert feature vector row225
row225_normalized = scaler.transform(row225.reshape(1, -1))
row225_tensor = torch.tensor(row225_normalized, dtype=torch.float32)

# Normalize and convert feature vector row226
row226_normalized = scaler.transform(row226.reshape(1, -1))
row226_tensor = torch.tensor(row226_normalized, dtype=torch.float32)

# Normalize and convert feature vector row227
row227_normalized = scaler.transform(row227.reshape(1, -1))
row227_tensor = torch.tensor(row227_normalized, dtype=torch.float32)

# Normalize and convert feature vector row228
row228_normalized = scaler.transform(row228.reshape(1, -1))
row228_tensor = torch.tensor(row228_normalized, dtype=torch.float32)

# Normalize and convert feature vector row229
row229_normalized = scaler.transform(row229.reshape(1, -1))
row229_tensor = torch.tensor(row229_normalized, dtype=torch.float32)

# Normalize and convert feature vector row230
row230_normalized = scaler.transform(row230.reshape(1, -1))
row230_tensor = torch.tensor(row230_normalized, dtype=torch.float32)

# Normalize and convert feature vector row231
row231_normalized = scaler.transform(row231.reshape(1, -1))
row231_tensor = torch.tensor(row231_normalized, dtype=torch.float32)

# Normalize and convert feature vector row232
row232_normalized = scaler.transform(row232.reshape(1, -1))
row232_tensor = torch.tensor(row232_normalized, dtype=torch.float32)

# Normalize and convert feature vector row233
row233_normalized = scaler.transform(row233.reshape(1, -1))
row233_tensor = torch.tensor(row233_normalized, dtype=torch.float32)

# Normalize and convert feature vector row234
row234_normalized = scaler.transform(row234.reshape(1, -1))
row234_tensor = torch.tensor(row234_normalized, dtype=torch.float32)

# Normalize and convert feature vector row235
row235_normalized = scaler.transform(row235.reshape(1, -1))
row235_tensor = torch.tensor(row235_normalized, dtype=torch.float32)

# Normalize and convert feature vector row236
row236_normalized = scaler.transform(row236.reshape(1, -1))
row236_tensor = torch.tensor(row236_normalized, dtype=torch.float32)

# Normalize and convert feature vector row237
row237_normalized = scaler.transform(row237.reshape(1, -1))
row237_tensor = torch.tensor(row237_normalized, dtype=torch.float32)

# Normalize and convert feature vector row238
row238_normalized = scaler.transform(row238.reshape(1, -1))
row238_tensor = torch.tensor(row238_normalized, dtype=torch.float32)

# Normalize and convert feature vector row239
row239_normalized = scaler.transform(row239.reshape(1, -1))
row239_tensor = torch.tensor(row239_normalized, dtype=torch.float32)

# Normalize and convert feature vector row240
row240_normalized = scaler.transform(row240.reshape(1, -1))
row240_tensor = torch.tensor(row240_normalized, dtype=torch.float32)

# Normalize and convert feature vector row241
row241_normalized = scaler.transform(row241.reshape(1, -1))
row241_tensor = torch.tensor(row241_normalized, dtype=torch.float32)

# Normalize and convert feature vector row242
row242_normalized = scaler.transform(row242.reshape(1, -1))
row242_tensor = torch.tensor(row242_normalized, dtype=torch.float32)

# Normalize and convert feature vector row243
row243_normalized = scaler.transform(row243.reshape(1, -1))
row243_tensor = torch.tensor(row243_normalized, dtype=torch.float32)

# Normalize and convert feature vector row244
row244_normalized = scaler.transform(row244.reshape(1, -1))
row244_tensor = torch.tensor(row244_normalized, dtype=torch.float32)

# Normalize and convert feature vector row245
row245_normalized = scaler.transform(row245.reshape(1, -1))
row245_tensor = torch.tensor(row245_normalized, dtype=torch.float32)

# Normalize and convert feature vector row246
row246_normalized = scaler.transform(row246.reshape(1, -1))
row246_tensor = torch.tensor(row246_normalized, dtype=torch.float32)

# Normalize and convert feature vector row247
row247_normalized = scaler.transform(row247.reshape(1, -1))
row247_tensor = torch.tensor(row247_normalized, dtype=torch.float32)

# Normalize and convert feature vector row248
row248_normalized = scaler.transform(row248.reshape(1, -1))
row248_tensor = torch.tensor(row248_normalized, dtype=torch.float32)

# Normalize and convert feature vector row249
row249_normalized = scaler.transform(row249.reshape(1, -1))
row249_tensor = torch.tensor(row249_normalized, dtype=torch.float32)

# Normalize and convert feature vector row250
row250_normalized = scaler.transform(row250.reshape(1, -1))
row250_tensor = torch.tensor(row250_normalized, dtype=torch.float32)

# Normalize and convert feature vector row251
row251_normalized = scaler.transform(row251.reshape(1, -1))
row251_tensor = torch.tensor(row251_normalized, dtype=torch.float32)

# Normalize and convert feature vector row252
row252_normalized = scaler.transform(row252.reshape(1, -1))
row252_tensor = torch.tensor(row252_normalized, dtype=torch.float32)

# Normalize and convert feature vector row253
row253_normalized = scaler.transform(row253.reshape(1, -1))
row253_tensor = torch.tensor(row253_normalized, dtype=torch.float32)

# Normalize and convert feature vector row254
row254_normalized = scaler.transform(row254.reshape(1, -1))
row254_tensor = torch.tensor(row254_normalized, dtype=torch.float32)

# Normalize and convert feature vector row255
row255_normalized = scaler.transform(row255.reshape(1, -1))
row255_tensor = torch.tensor(row255_normalized, dtype=torch.float32)

# Normalize and convert feature vector row256
row256_normalized = scaler.transform(row256.reshape(1, -1))
row256_tensor = torch.tensor(row256_normalized, dtype=torch.float32)

# Normalize and convert feature vector row257
row257_normalized = scaler.transform(row257.reshape(1, -1))
row257_tensor = torch.tensor(row257_normalized, dtype=torch.float32)

# Normalize and convert feature vector row258
row258_normalized = scaler.transform(row258.reshape(1, -1))
row258_tensor = torch.tensor(row258_normalized, dtype=torch.float32)

# Normalize and convert feature vector row259
row259_normalized = scaler.transform(row259.reshape(1, -1))
row259_tensor = torch.tensor(row259_normalized, dtype=torch.float32)

# Normalize and convert feature vector row260
row260_normalized = scaler.transform(row260.reshape(1, -1))
row260_tensor = torch.tensor(row260_normalized, dtype=torch.float32)

# Normalize and convert feature vector row261
row261_normalized = scaler.transform(row261.reshape(1, -1))
row261_tensor = torch.tensor(row261_normalized, dtype=torch.float32)

# Normalize and convert feature vector row262
row262_normalized = scaler.transform(row262.reshape(1, -1))
row262_tensor = torch.tensor(row262_normalized, dtype=torch.float32)

# Normalize and convert feature vector row263
row263_normalized = scaler.transform(row263.reshape(1, -1))
row263_tensor = torch.tensor(row263_normalized, dtype=torch.float32)

# Normalize and convert feature vector row264
row264_normalized = scaler.transform(row264.reshape(1, -1))
row264_tensor = torch.tensor(row264_normalized, dtype=torch.float32)

# Normalize and convert feature vector row265
row265_normalized = scaler.transform(row265.reshape(1, -1))
row265_tensor = torch.tensor(row265_normalized, dtype=torch.float32)

# Normalize and convert feature vector row266
row266_normalized = scaler.transform(row266.reshape(1, -1))
row266_tensor = torch.tensor(row266_normalized, dtype=torch.float32)

# Normalize and convert feature vector row267
row267_normalized = scaler.transform(row267.reshape(1, -1))
row267_tensor = torch.tensor(row267_normalized, dtype=torch.float32)

# Normalize and convert feature vector row268
row268_normalized = scaler.transform(row268.reshape(1, -1))
row268_tensor = torch.tensor(row268_normalized, dtype=torch.float32)

# Normalize and convert feature vector row269
row269_normalized = scaler.transform(row269.reshape(1, -1))
row269_tensor = torch.tensor(row269_normalized, dtype=torch.float32)

# Normalize and convert feature vector row270
row270_normalized = scaler.transform(row270.reshape(1, -1))
row270_tensor = torch.tensor(row270_normalized, dtype=torch.float32)

# Normalize and convert feature vector row271
row271_normalized = scaler.transform(row271.reshape(1, -1))
row271_tensor = torch.tensor(row271_normalized, dtype=torch.float32)

# Normalize and convert feature vector row272
row272_normalized = scaler.transform(row272.reshape(1, -1))
row272_tensor = torch.tensor(row272_normalized, dtype=torch.float32)

# Normalize and convert feature vector row273
row273_normalized = scaler.transform(row273.reshape(1, -1))
row273_tensor = torch.tensor(row273_normalized, dtype=torch.float32)

# Normalize and convert feature vector row274
row274_normalized = scaler.transform(row274.reshape(1, -1))
row274_tensor = torch.tensor(row274_normalized, dtype=torch.float32)

# Normalize and convert feature vector row275
row275_normalized = scaler.transform(row275.reshape(1, -1))
row275_tensor = torch.tensor(row275_normalized, dtype=torch.float32)

# Normalize and convert feature vector row276
row276_normalized = scaler.transform(row276.reshape(1, -1))
row276_tensor = torch.tensor(row276_normalized, dtype=torch.float32)

# Normalize and convert feature vector row277
row277_normalized = scaler.transform(row277.reshape(1, -1))
row277_tensor = torch.tensor(row277_normalized, dtype=torch.float32)

# Normalize and convert feature vector row278
row278_normalized = scaler.transform(row278.reshape(1, -1))
row278_tensor = torch.tensor(row278_normalized, dtype=torch.float32)

# Normalize and convert feature vector row279
row279_normalized = scaler.transform(row279.reshape(1, -1))
row279_tensor = torch.tensor(row279_normalized, dtype=torch.float32)

# Normalize and convert feature vector row280
row280_normalized = scaler.transform(row280.reshape(1, -1))
row280_tensor = torch.tensor(row280_normalized, dtype=torch.float32)

# Normalize and convert feature vector row281
row281_normalized = scaler.transform(row281.reshape(1, -1))
row281_tensor = torch.tensor(row281_normalized, dtype=torch.float32)

# Normalize and convert feature vector row282
row282_normalized = scaler.transform(row282.reshape(1, -1))
row282_tensor = torch.tensor(row282_normalized, dtype=torch.float32)

# Normalize and convert feature vector row283
row283_normalized = scaler.transform(row283.reshape(1, -1))
row283_tensor = torch.tensor(row283_normalized, dtype=torch.float32)

# Normalize and convert feature vector row284
row284_normalized = scaler.transform(row284.reshape(1, -1))
row284_tensor = torch.tensor(row284_normalized, dtype=torch.float32)

# Normalize and convert feature vector row285
row285_normalized = scaler.transform(row285.reshape(1, -1))
row285_tensor = torch.tensor(row285_normalized, dtype=torch.float32)

# Normalize and convert feature vector row286
row286_normalized = scaler.transform(row286.reshape(1, -1))
row286_tensor = torch.tensor(row286_normalized, dtype=torch.float32)

# Normalize and convert feature vector row287
row287_normalized = scaler.transform(row287.reshape(1, -1))
row287_tensor = torch.tensor(row287_normalized, dtype=torch.float32)

# Normalize and convert feature vector row288
row288_normalized = scaler.transform(row288.reshape(1, -1))
row288_tensor = torch.tensor(row288_normalized, dtype=torch.float32)

# Normalize and convert feature vector row289
row289_normalized = scaler.transform(row289.reshape(1, -1))
row289_tensor = torch.tensor(row289_normalized, dtype=torch.float32)

# Normalize and convert feature vector row290
row290_normalized = scaler.transform(row290.reshape(1, -1))
row290_tensor = torch.tensor(row290_normalized, dtype=torch.float32)

# Normalize and convert feature vector row291
row291_normalized = scaler.transform(row291.reshape(1, -1))
row291_tensor = torch.tensor(row291_normalized, dtype=torch.float32)

# Normalize and convert feature vector row292
row292_normalized = scaler.transform(row292.reshape(1, -1))
row292_tensor = torch.tensor(row292_normalized, dtype=torch.float32)

# Normalize and convert feature vector row293
row293_normalized = scaler.transform(row293.reshape(1, -1))
row293_tensor = torch.tensor(row293_normalized, dtype=torch.float32)

# Normalize and convert feature vector row294
row294_normalized = scaler.transform(row294.reshape(1, -1))
row294_tensor = torch.tensor(row294_normalized, dtype=torch.float32)

# Normalize and convert feature vector row295
row295_normalized = scaler.transform(row295.reshape(1, -1))
row295_tensor = torch.tensor(row295_normalized, dtype=torch.float32)

# Normalize and convert feature vector row296
row296_normalized = scaler.transform(row296.reshape(1, -1))
row296_tensor = torch.tensor(row296_normalized, dtype=torch.float32)

# Normalize and convert feature vector row297
row297_normalized = scaler.transform(row297.reshape(1, -1))
row297_tensor = torch.tensor(row297_normalized, dtype=torch.float32)

# Normalize and convert feature vector row298
row298_normalized = scaler.transform(row298.reshape(1, -1))
row298_tensor = torch.tensor(row298_normalized, dtype=torch.float32)

# Normalize and convert feature vector row299
row299_normalized = scaler.transform(row299.reshape(1, -1))
row299_tensor = torch.tensor(row299_normalized, dtype=torch.float32)

# Normalize and convert feature vector row300
row300_normalized = scaler.transform(row300.reshape(1, -1))
row300_tensor = torch.tensor(row300_normalized, dtype=torch.float32)

# Normalize and convert feature vector row301
row301_normalized = scaler.transform(row301.reshape(1, -1))
row301_tensor = torch.tensor(row301_normalized, dtype=torch.float32)

# Normalize and convert feature vector row302
row302_normalized = scaler.transform(row302.reshape(1, -1))
row302_tensor = torch.tensor(row302_normalized, dtype=torch.float32)

# Normalize and convert feature vector row303
row303_normalized = scaler.transform(row303.reshape(1, -1))
row303_tensor = torch.tensor(row303_normalized, dtype=torch.float32)

# Normalize and convert feature vector row304
row304_normalized = scaler.transform(row304.reshape(1, -1))
row304_tensor = torch.tensor(row304_normalized, dtype=torch.float32)

# Normalize and convert feature vector row305
row305_normalized = scaler.transform(row305.reshape(1, -1))
row305_tensor = torch.tensor(row305_normalized, dtype=torch.float32)

# Normalize and convert feature vector row306
row306_normalized = scaler.transform(row306.reshape(1, -1))
row306_tensor = torch.tensor(row306_normalized, dtype=torch.float32)

# Normalize and convert feature vector row307
row307_normalized = scaler.transform(row307.reshape(1, -1))
row307_tensor = torch.tensor(row307_normalized, dtype=torch.float32)

# Normalize and convert feature vector row308
row308_normalized = scaler.transform(row308.reshape(1, -1))
row308_tensor = torch.tensor(row308_normalized, dtype=torch.float32)

# Normalize and convert feature vector row309
row309_normalized = scaler.transform(row309.reshape(1, -1))
row309_tensor = torch.tensor(row309_normalized, dtype=torch.float32)

# Normalize and convert feature vector row310
row310_normalized = scaler.transform(row310.reshape(1, -1))
row310_tensor = torch.tensor(row310_normalized, dtype=torch.float32)

# Normalize and convert feature vector row311
row311_normalized = scaler.transform(row311.reshape(1, -1))
row311_tensor = torch.tensor(row311_normalized, dtype=torch.float32)

# Normalize and convert feature vector row312
row312_normalized = scaler.transform(row312.reshape(1, -1))
row312_tensor = torch.tensor(row312_normalized, dtype=torch.float32)

# Normalize and convert feature vector row313
row313_normalized = scaler.transform(row313.reshape(1, -1))
row313_tensor = torch.tensor(row313_normalized, dtype=torch.float32)

# Normalize and convert feature vector row314
row314_normalized = scaler.transform(row314.reshape(1, -1))
row314_tensor = torch.tensor(row314_normalized, dtype=torch.float32)

# Normalize and convert feature vector row315
row315_normalized = scaler.transform(row315.reshape(1, -1))
row315_tensor = torch.tensor(row315_normalized, dtype=torch.float32)

# Normalize and convert feature vector row316
row316_normalized = scaler.transform(row316.reshape(1, -1))
row316_tensor = torch.tensor(row316_normalized, dtype=torch.float32)

# Normalize and convert feature vector row317
row317_normalized = scaler.transform(row317.reshape(1, -1))
row317_tensor = torch.tensor(row317_normalized, dtype=torch.float32)

# Normalize and convert feature vector row318
row318_normalized = scaler.transform(row318.reshape(1, -1))
row318_tensor = torch.tensor(row318_normalized, dtype=torch.float32)

# Normalize and convert feature vector row319
row319_normalized = scaler.transform(row319.reshape(1, -1))
row319_tensor = torch.tensor(row319_normalized, dtype=torch.float32)

# Normalize and convert feature vector row320
row320_normalized = scaler.transform(row320.reshape(1, -1))
row320_tensor = torch.tensor(row320_normalized, dtype=torch.float32)

# Normalize and convert feature vector row321
row321_normalized = scaler.transform(row321.reshape(1, -1))
row321_tensor = torch.tensor(row321_normalized, dtype=torch.float32)

# Normalize and convert feature vector row322
row322_normalized = scaler.transform(row322.reshape(1, -1))
row322_tensor = torch.tensor(row322_normalized, dtype=torch.float32)

# Normalize and convert feature vector row323
row323_normalized = scaler.transform(row323.reshape(1, -1))
row323_tensor = torch.tensor(row323_normalized, dtype=torch.float32)

# Normalize and convert feature vector row324
row324_normalized = scaler.transform(row324.reshape(1, -1))
row324_tensor = torch.tensor(row324_normalized, dtype=torch.float32)

# Normalize and convert feature vector row325
row325_normalized = scaler.transform(row325.reshape(1, -1))
row325_tensor = torch.tensor(row325_normalized, dtype=torch.float32)

# Normalize and convert feature vector row326
row326_normalized = scaler.transform(row326.reshape(1, -1))
row326_tensor = torch.tensor(row326_normalized, dtype=torch.float32)

# Normalize and convert feature vector row327
row327_normalized = scaler.transform(row327.reshape(1, -1))
row327_tensor = torch.tensor(row327_normalized, dtype=torch.float32)

# Normalize and convert feature vector row328
row328_normalized = scaler.transform(row328.reshape(1, -1))
row328_tensor = torch.tensor(row328_normalized, dtype=torch.float32)

# Normalize and convert feature vector row329
row329_normalized = scaler.transform(row329.reshape(1, -1))
row329_tensor = torch.tensor(row329_normalized, dtype=torch.float32)

# Normalize and convert feature vector row330
row330_normalized = scaler.transform(row330.reshape(1, -1))
row330_tensor = torch.tensor(row330_normalized, dtype=torch.float32)

# Normalize and convert feature vector row331
row331_normalized = scaler.transform(row331.reshape(1, -1))
row331_tensor = torch.tensor(row331_normalized, dtype=torch.float32)

# Normalize and convert feature vector row332
row332_normalized = scaler.transform(row332.reshape(1, -1))
row332_tensor = torch.tensor(row332_normalized, dtype=torch.float32)

# Normalize and convert feature vector row333
row333_normalized = scaler.transform(row333.reshape(1, -1))
row333_tensor = torch.tensor(row333_normalized, dtype=torch.float32)

# Normalize and convert feature vector row334
row334_normalized = scaler.transform(row334.reshape(1, -1))
row334_tensor = torch.tensor(row334_normalized, dtype=torch.float32)

# Normalize and convert feature vector row335
row335_normalized = scaler.transform(row335.reshape(1, -1))
row335_tensor = torch.tensor(row335_normalized, dtype=torch.float32)

# Normalize and convert feature vector row336
row336_normalized = scaler.transform(row336.reshape(1, -1))
row336_tensor = torch.tensor(row336_normalized, dtype=torch.float32)

# Normalize and convert feature vector row337
row337_normalized = scaler.transform(row337.reshape(1, -1))
row337_tensor = torch.tensor(row337_normalized, dtype=torch.float32)

# Normalize and convert feature vector row338
row338_normalized = scaler.transform(row338.reshape(1, -1))
row338_tensor = torch.tensor(row338_normalized, dtype=torch.float32)

# Normalize and convert feature vector row339
row339_normalized = scaler.transform(row339.reshape(1, -1))
row339_tensor = torch.tensor(row339_normalized, dtype=torch.float32)

# Normalize and convert feature vector row340
row340_normalized = scaler.transform(row340.reshape(1, -1))
row340_tensor = torch.tensor(row340_normalized, dtype=torch.float32)

# Normalize and convert feature vector row341
row341_normalized = scaler.transform(row341.reshape(1, -1))
row341_tensor = torch.tensor(row341_normalized, dtype=torch.float32)

# Normalize and convert feature vector row342
row342_normalized = scaler.transform(row342.reshape(1, -1))
row342_tensor = torch.tensor(row342_normalized, dtype=torch.float32)

# Normalize and convert feature vector row343
row343_normalized = scaler.transform(row343.reshape(1, -1))
row343_tensor = torch.tensor(row343_normalized, dtype=torch.float32)

# Normalize and convert feature vector row344
row344_normalized = scaler.transform(row344.reshape(1, -1))
row344_tensor = torch.tensor(row344_normalized, dtype=torch.float32)

# Normalize and convert feature vector row345
row345_normalized = scaler.transform(row345.reshape(1, -1))
row345_tensor = torch.tensor(row345_normalized, dtype=torch.float32)

# Normalize and convert feature vector row346
row346_normalized = scaler.transform(row346.reshape(1, -1))
row346_tensor = torch.tensor(row346_normalized, dtype=torch.float32)

# Normalize and convert feature vector row347
row347_normalized = scaler.transform(row347.reshape(1, -1))
row347_tensor = torch.tensor(row347_normalized, dtype=torch.float32)

# Normalize and convert feature vector row348
row348_normalized = scaler.transform(row348.reshape(1, -1))
row348_tensor = torch.tensor(row348_normalized, dtype=torch.float32)

# Normalize and convert feature vector row349
row349_normalized = scaler.transform(row349.reshape(1, -1))
row349_tensor = torch.tensor(row349_normalized, dtype=torch.float32)

# Normalize and convert feature vector row350
row350_normalized = scaler.transform(row350.reshape(1, -1))
row350_tensor = torch.tensor(row350_normalized, dtype=torch.float32)

# Normalize and convert feature vector row351
row351_normalized = scaler.transform(row351.reshape(1, -1))
row351_tensor = torch.tensor(row351_normalized, dtype=torch.float32)

# Normalize and convert feature vector row352
row352_normalized = scaler.transform(row352.reshape(1, -1))
row352_tensor = torch.tensor(row352_normalized, dtype=torch.float32)

# Normalize and convert feature vector row353
row353_normalized = scaler.transform(row353.reshape(1, -1))
row353_tensor = torch.tensor(row353_normalized, dtype=torch.float32)

# Normalize and convert feature vector row354
row354_normalized = scaler.transform(row354.reshape(1, -1))
row354_tensor = torch.tensor(row354_normalized, dtype=torch.float32)

# Normalize and convert feature vector row355
row355_normalized = scaler.transform(row355.reshape(1, -1))
row355_tensor = torch.tensor(row355_normalized, dtype=torch.float32)

# Normalize and convert feature vector row356
row356_normalized = scaler.transform(row356.reshape(1, -1))
row356_tensor = torch.tensor(row356_normalized, dtype=torch.float32)

# Normalize and convert feature vector row357
row357_normalized = scaler.transform(row357.reshape(1, -1))
row357_tensor = torch.tensor(row357_normalized, dtype=torch.float32)

# Normalize and convert feature vector row358
row358_normalized = scaler.transform(row358.reshape(1, -1))
row358_tensor = torch.tensor(row358_normalized, dtype=torch.float32)

# Normalize and convert feature vector row359
row359_normalized = scaler.transform(row359.reshape(1, -1))
row359_tensor = torch.tensor(row359_normalized, dtype=torch.float32)

# Normalize and convert feature vector row360
row360_normalized = scaler.transform(row360.reshape(1, -1))
row360_tensor = torch.tensor(row360_normalized, dtype=torch.float32)

# Normalize and convert feature vector row361
row361_normalized = scaler.transform(row361.reshape(1, -1))
row361_tensor = torch.tensor(row361_normalized, dtype=torch.float32)

# Normalize and convert feature vector row362
row362_normalized = scaler.transform(row362.reshape(1, -1))
row362_tensor = torch.tensor(row362_normalized, dtype=torch.float32)

# Normalize and convert feature vector row363
row363_normalized = scaler.transform(row363.reshape(1, -1))
row363_tensor = torch.tensor(row363_normalized, dtype=torch.float32)

# Normalize and convert feature vector row364
row364_normalized = scaler.transform(row364.reshape(1, -1))
row364_tensor = torch.tensor(row364_normalized, dtype=torch.float32)

# Normalize and convert feature vector row365
row365_normalized = scaler.transform(row365.reshape(1, -1))
row365_tensor = torch.tensor(row365_normalized, dtype=torch.float32)

# Normalize and convert feature vector row366
row366_normalized = scaler.transform(row366.reshape(1, -1))
row366_tensor = torch.tensor(row366_normalized, dtype=torch.float32)

# Normalize and convert feature vector row367
row367_normalized = scaler.transform(row367.reshape(1, -1))
row367_tensor = torch.tensor(row367_normalized, dtype=torch.float32)

# Normalize and convert feature vector row368
row368_normalized = scaler.transform(row368.reshape(1, -1))
row368_tensor = torch.tensor(row368_normalized, dtype=torch.float32)

# Normalize and convert feature vector row369
row369_normalized = scaler.transform(row369.reshape(1, -1))
row369_tensor = torch.tensor(row369_normalized, dtype=torch.float32)

# Normalize and convert feature vector row370
row370_normalized = scaler.transform(row370.reshape(1, -1))
row370_tensor = torch.tensor(row370_normalized, dtype=torch.float32)

# Normalize and convert feature vector row371
row371_normalized = scaler.transform(row371.reshape(1, -1))
row371_tensor = torch.tensor(row371_normalized, dtype=torch.float32)

# Normalize and convert feature vector row372
row372_normalized = scaler.transform(row372.reshape(1, -1))
row372_tensor = torch.tensor(row372_normalized, dtype=torch.float32)

# Normalize and convert feature vector row373
row373_normalized = scaler.transform(row373.reshape(1, -1))
row373_tensor = torch.tensor(row373_normalized, dtype=torch.float32)

# Normalize and convert feature vector row374
row374_normalized = scaler.transform(row374.reshape(1, -1))
row374_tensor = torch.tensor(row374_normalized, dtype=torch.float32)

# Normalize and convert feature vector row375
row375_normalized = scaler.transform(row375.reshape(1, -1))
row375_tensor = torch.tensor(row375_normalized, dtype=torch.float32)

# Normalize and convert feature vector row376
row376_normalized = scaler.transform(row376.reshape(1, -1))
row376_tensor = torch.tensor(row376_normalized, dtype=torch.float32)

# Normalize and convert feature vector row377
row377_normalized = scaler.transform(row377.reshape(1, -1))
row377_tensor = torch.tensor(row377_normalized, dtype=torch.float32)

# Normalize and convert feature vector row378
row378_normalized = scaler.transform(row378.reshape(1, -1))
row378_tensor = torch.tensor(row378_normalized, dtype=torch.float32)

# Normalize and convert feature vector row379
row379_normalized = scaler.transform(row379.reshape(1, -1))
row379_tensor = torch.tensor(row379_normalized, dtype=torch.float32)

# Normalize and convert feature vector row380
row380_normalized = scaler.transform(row380.reshape(1, -1))
row380_tensor = torch.tensor(row380_normalized, dtype=torch.float32)

# Normalize and convert feature vector row381
row381_normalized = scaler.transform(row381.reshape(1, -1))
row381_tensor = torch.tensor(row381_normalized, dtype=torch.float32)

# Normalize and convert feature vector row382
row382_normalized = scaler.transform(row382.reshape(1, -1))
row382_tensor = torch.tensor(row382_normalized, dtype=torch.float32)

# Normalize and convert feature vector row383
row383_normalized = scaler.transform(row383.reshape(1, -1))
row383_tensor = torch.tensor(row383_normalized, dtype=torch.float32)

# Normalize and convert feature vector row384
row384_normalized = scaler.transform(row384.reshape(1, -1))
row384_tensor = torch.tensor(row384_normalized, dtype=torch.float32)

# Normalize and convert feature vector row385
row385_normalized = scaler.transform(row385.reshape(1, -1))
row385_tensor = torch.tensor(row385_normalized, dtype=torch.float32)

# Normalize and convert feature vector row386
row386_normalized = scaler.transform(row386.reshape(1, -1))
row386_tensor = torch.tensor(row386_normalized, dtype=torch.float32)

# Normalize and convert feature vector row387
row387_normalized = scaler.transform(row387.reshape(1, -1))
row387_tensor = torch.tensor(row387_normalized, dtype=torch.float32)

# Normalize and convert feature vector row388
row388_normalized = scaler.transform(row388.reshape(1, -1))
row388_tensor = torch.tensor(row388_normalized, dtype=torch.float32)

# Normalize and convert feature vector row389
row389_normalized = scaler.transform(row389.reshape(1, -1))
row389_tensor = torch.tensor(row389_normalized, dtype=torch.float32)

# Normalize and convert feature vector row390
row390_normalized = scaler.transform(row390.reshape(1, -1))
row390_tensor = torch.tensor(row390_normalized, dtype=torch.float32)

# Normalize and convert feature vector row391
row391_normalized = scaler.transform(row391.reshape(1, -1))
row391_tensor = torch.tensor(row391_normalized, dtype=torch.float32)

# Normalize and convert feature vector row392
row392_normalized = scaler.transform(row392.reshape(1, -1))
row392_tensor = torch.tensor(row392_normalized, dtype=torch.float32)

# Normalize and convert feature vector row393
row393_normalized = scaler.transform(row393.reshape(1, -1))
row393_tensor = torch.tensor(row393_normalized, dtype=torch.float32)

# Normalize and convert feature vector row394
row394_normalized = scaler.transform(row394.reshape(1, -1))
row394_tensor = torch.tensor(row394_normalized, dtype=torch.float32)

# Normalize and convert feature vector row395
row395_normalized = scaler.transform(row395.reshape(1, -1))
row395_tensor = torch.tensor(row395_normalized, dtype=torch.float32)

# Normalize and convert feature vector row396
row396_normalized = scaler.transform(row396.reshape(1, -1))
row396_tensor = torch.tensor(row396_normalized, dtype=torch.float32)

# Normalize and convert feature vector row397
row397_normalized = scaler.transform(row397.reshape(1, -1))
row397_tensor = torch.tensor(row397_normalized, dtype=torch.float32)

# Normalize and convert feature vector row398
row398_normalized = scaler.transform(row398.reshape(1, -1))
row398_tensor = torch.tensor(row398_normalized, dtype=torch.float32)

# Normalize and convert feature vector row399
row399_normalized = scaler.transform(row399.reshape(1, -1))
row399_tensor = torch.tensor(row399_normalized, dtype=torch.float32)

# Normalize and convert feature vector row400
row400_normalized = scaler.transform(row400.reshape(1, -1))
row400_tensor = torch.tensor(row400_normalized, dtype=torch.float32)

# Normalize and convert feature vector row401
row401_normalized = scaler.transform(row401.reshape(1, -1))
row401_tensor = torch.tensor(row401_normalized, dtype=torch.float32)

# Normalize and convert feature vector row402
row402_normalized = scaler.transform(row402.reshape(1, -1))
row402_tensor = torch.tensor(row402_normalized, dtype=torch.float32)

# Normalize and convert feature vector row403
row403_normalized = scaler.transform(row403.reshape(1, -1))
row403_tensor = torch.tensor(row403_normalized, dtype=torch.float32)

# Normalize and convert feature vector row404
row404_normalized = scaler.transform(row404.reshape(1, -1))
row404_tensor = torch.tensor(row404_normalized, dtype=torch.float32)

# Normalize and convert feature vector row405
row405_normalized = scaler.transform(row405.reshape(1, -1))
row405_tensor = torch.tensor(row405_normalized, dtype=torch.float32)

# Normalize and convert feature vector row406
row406_normalized = scaler.transform(row406.reshape(1, -1))
row406_tensor = torch.tensor(row406_normalized, dtype=torch.float32)


model.eval()
with torch.no_grad():
    predicted_inflation_rate = model(new_features_tensor).item()
    inflrate_row2 = model(row2_tensor).item()

print(f"Predicted Inflation Rate: {predicted_inflation_rate}%")

